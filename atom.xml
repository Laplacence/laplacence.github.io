<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Trash Can</title>
  
  <subtitle>Recycle Bin</subtitle>
  <link href="https://laplacence.github.io/atom.xml" rel="self"/>
  
  <link href="https://laplacence.github.io/"/>
  <updated>2021-09-06T09:10:10.000Z</updated>
  <id>https://laplacence.github.io/</id>
  
  <author>
    <name>Laplacence</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nornir基本使用教程</title>
    <link href="https://laplacence.github.io/2021/08/29/nornir_manual/"/>
    <id>https://laplacence.github.io/2021/08/29/nornir_manual/</id>
    <published>2021-08-28T16:00:00.000Z</published>
    <updated>2021-09-06T09:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于nornir3.1.1进行代码测试和执行。</p><span id="more"></span><p>其实和<a href="https://nornir.readthedocs.io/en/latest/index.html">nornir官方文档</a>没什么大差别，写出来方便自己查阅和使用。</p><p>nornir，100%基于python3构成的自动化框架，易于NetDevOps进行二次开发和脚本编写，操作容易。</p><p>相比于ansible，操作更为简单容易，且只需使用python3即可完成配置和脚本编写。</p><p>加上支持使用netmiko，使得一些较为冷门的交换机如ruijie、h3c等无需二次开发插件即可进行脚本编写。</p><p>目前版本为3.1.1，与之前的版本差异较大，看同类文章时需注意版本。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>nornir本体和常用的插件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install nornir nornir_utils nornir_netmiko</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p>nornir分为三类文件：</p><ul><li>配置文件yaml</li><li>机器管理文件yaml</li><li>用户脚本py</li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>首先看配置文件yaml，一般使用<code>config.yaml</code>，可自定义命名。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#config.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#仓库配置</span></span><br><span class="line"><span class="attr">inventory:</span></span><br><span class="line">    <span class="comment">#仓库管理插件，一般使用这个，也可自己编写插件。</span></span><br><span class="line">    <span class="attr">plugin:</span> <span class="string">SimpleInventory</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">        <span class="comment">#三类机器管理文件yaml，可自定义位置。</span></span><br><span class="line">        <span class="attr">host_file:</span> <span class="string">&quot;inventory/hosts.yaml&quot;</span></span><br><span class="line">        <span class="attr">group_file:</span> <span class="string">&quot;inventory/groups.yaml&quot;</span></span><br><span class="line">        <span class="attr">defaults_file:</span> <span class="string">&quot;inventory/defaults.yaml&quot;</span></span><br><span class="line"><span class="comment">#执行器配置</span></span><br><span class="line"><span class="attr">runner:</span></span><br><span class="line">    <span class="comment">#多线程插件</span></span><br><span class="line">    <span class="attr">plugin:</span> <span class="string">threaded</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">        <span class="comment">#线程数</span></span><br><span class="line">        <span class="attr">num_workers:</span> <span class="number">64</span></span><br></pre></td></tr></table></figure><p>也可以直接在python文件中使用变量指定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nornir <span class="keyword">import</span> InitNornir</span><br><span class="line">nr = InitNornir(</span><br><span class="line">    runner=&#123;</span><br><span class="line">        <span class="string">&quot;plugin&quot;</span>: <span class="string">&quot;threaded&quot;</span>,</span><br><span class="line">        <span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;num_workers&quot;</span>: <span class="number">100</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    inventory=&#123;</span><br><span class="line">        <span class="string">&quot;plugin&quot;</span>: <span class="string">&quot;SimpleInventory&quot;</span>,</span><br><span class="line">        <span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;host_file&quot;</span>: <span class="string">&quot;inventory/hosts.yaml&quot;</span>,</span><br><span class="line">            <span class="string">&quot;group_file&quot;</span>: <span class="string">&quot;inventory/groups.yaml&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>或两类混用指定配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nornir <span class="keyword">import</span> InitNornir</span><br><span class="line">nr = InitNornir(</span><br><span class="line">    config_file=<span class="string">&quot;config.yaml&quot;</span>,</span><br><span class="line">    runner=&#123;</span><br><span class="line">        <span class="string">&quot;plugin&quot;</span>: <span class="string">&quot;threaded&quot;</span>,</span><br><span class="line">        <span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;num_workers&quot;</span>: <span class="number">50</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>接着可以使用python文件进行测试，无异常则配置测试通过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nornir <span class="keyword">import</span> InitNornir</span><br><span class="line">nr = InitNornir(config_file=<span class="string">&quot;config.yaml&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="机器管理文件"><a href="#机器管理文件" class="headerlink" title="机器管理文件"></a>机器管理文件</h4><p>目前来看，例如<code>host_file</code>不支持使用多个文件，无法像ansible使用多个文件进行分类管理。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hosts.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#设备名称，可自定义，即nornir认为的机器名称。</span></span><br><span class="line"><span class="attr">cisco_3850:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">cisco</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">cisco_password</span></span><br><span class="line">    <span class="comment">#nornir自带的platform支持数量过少，这里直接使用netmiko支持的platform</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">cisco_ios</span></span><br><span class="line">    <span class="comment">#分组，会在groups.yaml内体现</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">access_switch</span></span><br><span class="line">    <span class="comment">#自定义字段，key和value可随意制定，与设备绑定。</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">        <span class="attr">role:</span> <span class="string">access_switch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cisco_3548:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">cisco</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">cisco_password</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">cisco_nxos</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">core_switch</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">        <span class="attr">role:</span> <span class="string">core_switch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server_1:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root_password</span></span><br></pre></td></tr></table></figure><p>下面为nornir默认的key/value参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;str&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;connection_options&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;$connection_type&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;extras&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;$key&quot;</span>: <span class="string">&quot;$value&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;str&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;port&quot;</span>: <span class="string">&quot;int&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;str&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;str&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;platform&quot;</span>: <span class="string">&quot;str&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;groups&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;$group_name&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;$key&quot;</span>: <span class="string">&quot;$value&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;hostname&quot;</span>: <span class="string">&quot;str&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;port&quot;</span>: <span class="string">&quot;int&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;str&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;str&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;platform&quot;</span>: <span class="string">&quot;str&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分组信息文件示例如下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#groups.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">access_switch:</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">switch</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">        <span class="attr">os_type:</span> <span class="string">ios</span></span><br><span class="line"></span><br><span class="line"><span class="attr">core_switch:</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">        <span class="attr">os_type:</span> <span class="string">nxos</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">switch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">switch:</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">switch</span></span><br><span class="line">        <span class="attr">test:</span></span><br><span class="line">            <span class="attr">test_dict:</span></span><br><span class="line">                <span class="attr">a:</span> <span class="number">1</span></span><br><span class="line">                <span class="attr">b:</span> <span class="number">2</span></span><br><span class="line">                <span class="attr">c:</span> <span class="string">abcdef</span></span><br><span class="line"></span><br><span class="line"><span class="attr">linux:</span></span><br><span class="line">    <span class="attr">data:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">server</span></span><br></pre></td></tr></table></figure><p>默认配置文件示例如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#defaults.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">platform:</span> <span class="string">linux</span></span><br><span class="line"><span class="attr">groups:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">linux</span></span><br></pre></td></tr></table></figure><h4 id="用户脚本"><a href="#用户脚本" class="headerlink" title="用户脚本"></a>用户脚本</h4><p>接下来使用脚本来查看配置文件内的机器参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nornir <span class="keyword">import</span> InitNornir</span><br><span class="line">nr = InitNornir(config_file=<span class="string">&quot;config.yaml&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(nr.inventory.hosts)</span><br><span class="line"><span class="built_in">print</span>(nr.inventory.groups)</span><br><span class="line"><span class="built_in">print</span>(nr.inventory.hosts[<span class="string">&#x27;server_1&#x27;</span>].keys())</span><br><span class="line"><span class="built_in">print</span>(nr.inventory.hosts[<span class="string">&#x27;cisco_3850&#x27;</span>].keys())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;cisco_3850&#x27;: Host: cisco_3850, &#x27;cisco_3548&#x27;: Host: cisco_3548, &#x27;server_1&#x27;: Host: server_1&#125;</span><br><span class="line">&#123;&#x27;access_switch&#x27;: Group: access_switch, &#x27;core_switch&#x27;: Group: core_switch, &#x27;switch&#x27;: Group: switch, &#x27;linux&#x27;: Group: linux&#125;</span><br><span class="line">dict_keys([])</span><br><span class="line">dict_keys([&#x27;role&#x27;, &#x27;os_type&#x27;, &#x27;type&#x27;, &#x27;test&#x27;])</span><br></pre></td></tr></table></figure><p>输出1可以看到所有机器名称和它的hostname。</p><p>输出2可以看到所有组。</p><p>输出3可以看到<code>server_1</code>的<code>data</code>所有key。</p><p>输出4可以看到<code>cisco_3850</code>的<code>data</code>所有key。</p><p>并且这些输出都是用标准的python数据格式，字典输出而成，无需经过二次处理即可使用。这里面玩法有多少想必大家都很清楚了。</p><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>没错，对于inventory，nornir自带了一个过滤器，可以用来区分设备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(nr.<span class="built_in">filter</span>(os_type=<span class="string">&quot;nxos&quot;</span>).inventory.hosts.keys())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_keys([&#x27;cisco_3548&#x27;])</span><br></pre></td></tr></table></figure><p>filter还可以循环使用，多个kv使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(nr.<span class="built_in">filter</span>(os_type=<span class="string">&quot;nxos&quot;</span>).<span class="built_in">filter</span>(role=<span class="string">&quot;core_switch&quot;</span>).inventory.hosts.keys())</span><br><span class="line"><span class="built_in">print</span>(nr.<span class="built_in">filter</span>(os_type=<span class="string">&quot;nxos&quot;</span>, role=<span class="string">&quot;core_switch&quot;</span>).inventory.hosts.keys())</span><br></pre></td></tr></table></figure><p>也可以作为变量，中转使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter_device=nr.<span class="built_in">filter</span>(os_type=<span class="string">&quot;nxos&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(filter_device.<span class="built_in">filter</span>(role=<span class="string">&quot;core_switch&quot;</span>))</span><br></pre></td></tr></table></figure><p>甚至可以塞函数进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_long_name</span>(<span class="params">host</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(host.name) == <span class="number">11</span></span><br><span class="line"></span><br><span class="line">nr.<span class="built_in">filter</span>(filter_func=has_long_name).inventory.hosts.keys()</span><br></pre></td></tr></table></figure><h4 id="children-of-group"><a href="#children-of-group" class="headerlink" title="children_of_group"></a>children_of_group</h4><p>filter主要使用data里面的key-value进行过滤，如果根据组别拉出来则使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(nr.inventory.children_of_group(<span class="string">&quot;access_switch&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;Host: cisco_3850&#125;</span><br></pre></td></tr></table></figure><h4 id="F"><a href="#F" class="headerlink" title="F"></a>F</h4><p>nornir提供了过滤器对象F，可以使用它进行更加复杂的组合判断。<code>__contains</code>可以判断是否符合指定字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nornir.core.<span class="built_in">filter</span> <span class="keyword">import</span> F</span><br><span class="line">device = nr.<span class="built_in">filter</span>(F(groups__contains=<span class="string">&quot;access_switch&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(device.inventory.hosts.keys())</span><br><span class="line">device = nr.<span class="built_in">filter</span>(F(groups__contains=<span class="string">&quot;access_switch&quot;</span>) | F(platform=<span class="string">&quot;linux&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(device.inventory.hosts.keys())</span><br><span class="line">device = nr.<span class="built_in">filter</span>(F(groups__contains=<span class="string">&quot;access_switch&quot;</span>) &amp; F(platform=<span class="string">&quot;linux&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(device.inventory.hosts.keys())</span><br><span class="line">device = nr.<span class="built_in">filter</span>(~F(platform=<span class="string">&quot;linux&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(device.inventory.hosts.keys())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_keys([&#x27;cisco_3850&#x27;])</span><br><span class="line">dict_keys([&#x27;cisco_3548&#x27;, &#x27;server_1&#x27;])</span><br><span class="line">dict_keys([])</span><br><span class="line">dict_keys([&#x27;cisco_3850&#x27;, &#x27;cisco_3548&#x27;])</span><br></pre></td></tr></table></figure><p>F甚至可以使用<code>__</code>进行data内的字段直接访问，这时候加上<code>__contains</code>可以判断是否为子字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">device = nr.<span class="built_in">filter</span>(F(test__test_dict__c__contains=<span class="string">&quot;def&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(device.inventory.hosts.keys())</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_keys([&#x27;cisco_3850&#x27;, &#x27;cisco_3548&#x27;])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文基于nornir3.1.1进行代码测试和执行。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="network" scheme="https://laplacence.github.io/categories/network/"/>
    
    <category term="Linux" scheme="https://laplacence.github.io/categories/Linux/"/>
    
    <category term="Python" scheme="https://laplacence.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>如何使用strace来解决问题？</title>
    <link href="https://laplacence.github.io/2021/04/29/how_to_use_strace/"/>
    <id>https://laplacence.github.io/2021/04/29/how_to_use_strace/</id>
    <published>2021-04-28T16:00:00.000Z</published>
    <updated>2021-04-29T09:43:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>如题，虽然可能很多地方都有类似介绍。</p><span id="more"></span><h2 id="程序的配置文件在哪？"><a href="#程序的配置文件在哪？" class="headerlink" title="程序的配置文件在哪？"></a>程序的配置文件在哪？</h2><p>老生长叹，毕竟你不知道这个程序的配置文件是在用户根目录，还是systemd内。</p><p>因为一个程序有一百万种方法来记录它的配置文件在哪里（在手册页、网站上、–help等），但只有一种方法可以让它真正打开它（用系统调用！）。</p><p>比如我现在找一下apt的配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> strace -tf apt 2&gt;&amp;1|grep <span class="built_in">stat</span></span></span><br><span class="line">.....</span><br><span class="line">17:07:05 stat(&quot;/etc/apt/apt.conf.d/&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0</span><br><span class="line">17:07:05 stat(&quot;/etc/apt/apt.conf.d/&quot;, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0</span><br><span class="line">17:07:05 fstat(4, &#123;st_mode=S_IFDIR|0755, st_size=4096, ...&#125;) = 0</span><br><span class="line">17:07:05 stat(&quot;/etc/apt/apt.conf&quot;, 0x7ffe7ec576b0) = -1 ENOENT (No such file or directory)</span><br><span class="line">17:07:05 stat(&quot;/var/lib/dpkg/status&quot;, &#123;st_mode=S_IFREG|0644, st_size=576398, ...&#125;) = 0</span><br><span class="line">17:07:05 stat(&quot;/usr/bin/dpkg&quot;, &#123;st_mode=S_IFREG|0755, st_size=313888, ...&#125;) = 0</span><br><span class="line">17:07:05 stat(&quot;/etc/debian_version&quot;, &#123;st_mode=S_IFREG|0644, st_size=13, ...&#125;) = 0</span><br><span class="line">17:07:05 stat(&quot;/usr/share/dpkg/tupletable&quot;, &#123;st_mode=S_IFREG|0644, st_size=2249, ...&#125;) = 0</span><br><span class="line">17:07:05 fstat(1, &#123;st_mode=S_IFIFO|0600, st_size=0, ...&#125;) = 0</span><br></pre></td></tr></table></figure><p>很明显可以看到<code>apt.conf.d</code>被加入了加载列表，以及<code>apt.conf</code>。</p><h2 id="为什么会挂掉？"><a href="#为什么会挂掉？" class="headerlink" title="为什么会挂掉？"></a>为什么会挂掉？</h2><p>执行程序，却什么输出都没有，这是怎么回事？</p><p>很多时候你只需要运行<code>strace -p PID</code>，看看当前运行的是什么系统调用。你甚至不需要看几百行的输出。</p><p>如果这个程序闪没了咋办？</p><p>试试这个！<code>strace &lt;command&gt;</code></p><h2 id="为什么很慢？"><a href="#为什么很慢？" class="headerlink" title="为什么很慢？"></a>为什么很慢？</h2><p>使用 strace 作为一种粗略的剖析工具<code>strace -t &lt;command&gt;</code></p><p>会显示每次系统调用的时间戳，这样你就可以寻找大的漏洞，找到罪魁祸首。</p><p>或者用统计工具 <code>strace -c &lt;command&gt;</code></p><h2 id="为什么这个网络连接失败？"><a href="#为什么这个网络连接失败？" class="headerlink" title="为什么这个网络连接失败？"></a>为什么这个网络连接失败？</h2><p>你可以通过DNS请求来查找域名，或者通过<code>connect</code>系统调用来查找IP。</p><p>一般来说，当<code>tcpdump</code>因为某些原因不能使用或者只是因为比较熟悉<code>strace</code>时，就经常会使用<code>strace</code>调试网络问题。</p><p>比如服务器<code>curl ifconfig.me</code>一直不出结果。<br>这时候<code>strace curl ifconfig.me</code>检查了一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sendto(3, &quot;GET HTTP://ifconfig.me/ HTTP/1.1&quot;..., 172, MSG_NOSIGNAL, NULL, 0) = 172</span><br><span class="line">poll([&#123;fd=3, events=POLLIN|POLLPRI|POLLRDNORM|POLLRDBAND&#125;], 1, 0) = 0 (Timeout)</span><br><span class="line">poll([&#123;fd=3, events=POLLIN&#125;], 1, 1000)  = 0 (Timeout)</span><br><span class="line">poll([&#123;fd=3, events=POLLIN|POLLPRI|POLLRDNORM|POLLRDBAND&#125;], 1, 0) = 0 (Timeout)</span><br><span class="line">poll([&#123;fd=3, events=POLLIN&#125;], 1, 1000)  = 0 (Timeout)</span><br><span class="line">poll([&#123;fd=3, events=POLLIN|POLLPRI|POLLRDNORM|POLLRDBAND&#125;], 1, 0) = 0 (Timeout)</span><br><span class="line">poll([&#123;fd=3, events=POLLIN&#125;], 1, 1000)  = 0 (Timeout)</span><br><span class="line">poll([&#123;fd=3, events=POLLIN|POLLPRI|POLLRDNORM|POLLRDBAND&#125;], 1, 0) = 0 (Timeout)</span><br><span class="line">poll([&#123;fd=3, events=POLLIN&#125;], 1, 1000)  = 0 (Timeout)</span><br><span class="line">poll([&#123;fd=3, events=POLLIN|POLLPRI|POLLRDNORM|POLLRDBAND&#125;], 1, 0) = 0 (Timeout)</span><br><span class="line">poll([&#123;fd=3, events=POLLIN&#125;], 1, 1000)  = 0 (Timeout)</span><br><span class="line">poll([&#123;fd=3, events=POLLIN|POLLPRI|POLLRDNORM|POLLRDBAND&#125;], 1, 0) = 0 (Timeout)</span><br></pre></td></tr></table></figure><p>发现一直超时，这样头绪会清晰一些，至少不是机器有问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如题，虽然可能很多地方都有类似介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Linux" scheme="https://laplacence.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7更换内核</title>
    <link href="https://laplacence.github.io/2021/04/22/upgrade_centos_kernel/"/>
    <id>https://laplacence.github.io/2021/04/22/upgrade_centos_kernel/</id>
    <published>2021-04-21T16:00:00.000Z</published>
    <updated>2021-04-29T13:02:45.996Z</updated>
    
    <content type="html"><![CDATA[<p>如题，虽然可能很多地方都有类似介绍。</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先到 <a href="http://elrepo.org/tiki/HomePage">http://elrepo.org/tiki/HomePage</a> ，按照步骤导入公钥和7的yum源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">dnf install -y https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure><p>换一波tuna源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/elrepo.repo</span><br><span class="line">:%s/mirrorlist=/#mirrorlist=/g</span><br><span class="line">:%s/elrepo.org\/linux/mirrors.tuna.tsinghua.edu.cn\/elrepo/g</span><br></pre></td></tr></table></figure><p>其次，确认自己需要mainline还是longtime的内核。前者更新快，后者支持时间更久更稳定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf --enablerepo=elrepo-kernel install -y --allowerasing kernel-lt kernel-lt-headers kernel-lt-tools kernel-lt-devel</span><br></pre></td></tr></table></figure><h2 id="更换"><a href="#更换" class="headerlink" title="更换"></a>更换</h2><p>然后查看自己的grub2启动表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> awk -F\<span class="string">&#x27; &#x27;</span><span class="variable">$1</span>==<span class="string">&quot;menuentry &quot;</span> &#123;<span class="built_in">print</span> i++ <span class="string">&quot; : &quot;</span> <span class="variable">$2</span>&#125;<span class="string">&#x27; /etc/grub2.cfg</span></span></span><br><span class="line">0 : CentOS Linux (5.11.16-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">1 : CentOS Linux (3.10.0-1160.24.1.el7.x86_64) 7 (Core)</span><br><span class="line">2 : CentOS Linux (3.10.0-1127.13.1.el7.x86_64) 7 (Core)</span><br><span class="line">3 : CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)</span><br><span class="line">4 : CentOS Linux (0-rescue-2af5b98ee1d740ee9ef8e747f5da2b49) 7 (Core)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着查看当前启动项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> grub2-editenv list</span></span><br><span class="line">saved_entry=CentOS Linux (3.10.0-1160.24.1.el7.x86_64) 7 (Core)</span><br></pre></td></tr></table></figure><p>更改为第一个,再看一下当前启动项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> grub2-set-default 0</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> grub2-editenv list</span></span><br><span class="line">saved_entry=0</span><br></pre></td></tr></table></figure><p>更改成功后reboot，uname看一下内核。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> uname -r</span></span><br><span class="line">5.11.16-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;如题，虽然可能很多地方都有类似介绍。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Linux" scheme="https://laplacence.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>cacti的绘图bug</title>
    <link href="https://laplacence.github.io/2021/01/26/cacti_bug/"/>
    <id>https://laplacence.github.io/2021/01/26/cacti_bug/</id>
    <published>2021-01-25T16:00:00.000Z</published>
    <updated>2021-01-26T07:16:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实这篇文应该在2020/09/15就该发出来了，一直忘记写了（</p><span id="more"></span><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>cacti选择起止时间后，绘图并不能正常进行，依旧显示原来的起止时间。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在相对旧版本的cacti内(versions&lt;=1.1)，根目录的绘图graph_image.php文件中，其中的时间判断是依据Unix timestamp，即从 1970/1/1 00:00:00 经过的秒数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* override: graph start time (unix time) */</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&quot;graph_start&quot;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&quot;graph_start&quot;</span>] &lt; <span class="number">1600000000</span>) &#123;</span><br><span class="line">    <span class="variable">$graph_data_array</span>[<span class="string">&quot;graph_start&quot;</span>] = <span class="variable">$_GET</span>[<span class="string">&quot;graph_start&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* override: graph end time (unix time) */</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&quot;graph_end&quot;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&quot;graph_end&quot;</span>] &lt; <span class="number">1600000000</span>) &#123;</span><br><span class="line">    <span class="variable">$graph_data_array</span>[<span class="string">&quot;graph_end&quot;</span>] = <span class="variable">$_GET</span>[<span class="string">&quot;graph_end&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原判断为小于1600000000，则会在 2020/09/13 20:26:40 后无法通过判断，进而导致绘图没有刷新。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>简单粗暴：把判断改大。<br>永久解决：更换新版本，确认机器的time_t是否为64位。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>这个问题说白了就是千年虫的翻版，且旧版本测试时候，有可能是在32位机器上进行测试，故判断写成了1600000000，但是32位机器上，Unix timestamp会在2038/01/19 03:14:07后工作异常。</p><p>如果挂载机器是32位，还是尽快更新为妙。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;其实这篇文应该在2020/09/15就该发出来了，一直忘记写了（&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Linux" scheme="https://laplacence.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>详解top应该怎么看</title>
    <link href="https://laplacence.github.io/2021/01/25/tutorial_of_top/"/>
    <id>https://laplacence.github.io/2021/01/25/tutorial_of_top/</id>
    <published>2021-01-24T16:00:00.000Z</published>
    <updated>2021-01-25T08:40:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux中的top命令显示系统上正在运行的进程。它是系统管理员最重要的工具之一。被广泛用于监视服务器的负载和进程。<br>（各个发行版的top可能会有出入，请参照对应系统的–help和man，以下展示均在centos7.4上完成。）</p><span id="more"></span><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>首先，让我们了解一下输出。top会显示系统的很多信息。我们需要理解不同部分输出的意义：默认运行时，top命令会显示如下输出：<br>前几行水平显示了不同系统参数的概括，接下来是进程和它们在列中的属性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">top - 15:16:42 up 103 days,  2:09,  1 user,  load average: 0.05, 0.09, 0.11</span><br><span class="line">Tasks: 1067 total,   2 running, 1065 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem : 65420768 total, 27637080 free,  4135944 used, 33647744 buff/cache</span><br><span class="line">KiB Swap: 16777212 total, 16777212 free,        0 used. 60326400 avail Mem </span><br><span class="line"></span><br><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND          </span><br><span class="line">165745 root      20   0 3486224  41824  10268 S   1.0  0.1   3635:03 vcs-agent        </span><br><span class="line"> 85707 root      20   0  163096   3320   1584 R   0.7  0.0   0:00.10 top              </span><br><span class="line">   785 root      39  19       0      0      0 R   0.3  0.0   4154:39 kipmi0           </span><br><span class="line">  2048 zabbixs+  20   0 7643260   4740   2212 S   0.3  0.0   1:00.49 zabbix_server    </span><br><span class="line">  2228 zabbixs+  20   0 7646732   7212   4400 S   0.3  0.0   3:17.22 zabbix_server    </span><br><span class="line">  2546 zabbixs+  20   0 7646852   7236   4404 S   0.3  0.0   3:22.93 zabbix_server    </span><br><span class="line"> 48226 root      20   0 2366696  57548  16872 S   0.3  0.1  67:27.70 containerd       </span><br><span class="line"> 62322 root      20   0       0      0      0 S   0.3  0.0   0:00.91 kworker/u448:0   </span><br><span class="line">     1 root      20   0  191164   4068   2464 S   0.0  0.0  16:17.96 systemd          </span><br><span class="line">     2 root      20   0       0      0      0 S   0.0  0.0   0:01.82 kthreadd         </span><br><span class="line">     3 root      20   0       0      0      0 S   0.0  0.0   0:39.27 ksoftirqd/0      </span><br><span class="line">     5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H     </span><br><span class="line">     8 root      rt   0       0      0      0 S   0.0  0.0   0:01.23 migration/0      </span><br></pre></td></tr></table></figure><h3 id="系统运行时间和平均负载"><a href="#系统运行时间和平均负载" class="headerlink" title="系统运行时间和平均负载"></a>系统运行时间和平均负载</h3><p><code>top - 15:16:52 up 103 days,  2:09,  1 user,  load average: 0.06, 0.09, 0.11</code></p><p>top命令的顶部显示与uptime命令相似的输出。</p><p>这些字段意思是：</p><ul><li>当前时间</li><li>系统已运行的时间</li><li>当前登录用户的数量</li><li>相应最近5、10和15分钟内的平均负载。</li><li>可以使用’l’命令切换uptime的显示。</li></ul><p>关于load average，我们可以粗略地按照如下计算方式。</p><p>load average/CPUs=usage percent</p><p>例如上面给出的0.06，这台机器的核心数量可以通过lscpu查看，是32，则利用率为0.1875%，且无进程在等待。</p><p>如果达到了65.00，则此时利用率为203.125%，且有33个进程在等待。</p><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p><code>Tasks: 1067 total,   2 running, 1065 sleeping,   0 stopped,   0 zombie</code><br>这一行说明了进程数量和进程类型。</p><h3 id="CPU状态"><a href="#CPU状态" class="headerlink" title="CPU状态"></a>CPU状态</h3><p><code>%Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</code><br>CPU状态，显示了不同模式下的百分比，分别为：</p><ul><li>us-user</li><li>sy-system</li><li>ni-niced 优先级</li><li>wa-wait</li><li>hi-hardware_interrupt</li><li>si-software_interrupt</li><li>st-steal 常见于虚拟机，指被虚拟CPU偷走的时间。</li></ul><h3 id="内存使用"><a href="#内存使用" class="headerlink" title="内存使用"></a>内存使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KiB Mem : 65420768 total, 27637080 free,  4135944 used, 33647744 buff/cache</span><br><span class="line">KiB Swap: 16777212 total, 16777212 free,        0 used. 60326400 avail Mem </span><br></pre></td></tr></table></figure><p>内存使用率，类似于free，第一行为物理内存，第二行为swap。</p><h3 id="具体信息"><a href="#具体信息" class="headerlink" title="具体信息"></a>具体信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND          </span><br><span class="line">165745 root      20   0 3486224  41824  10268 S   1.0  0.1   3635:03 vcs-agent        </span><br><span class="line"> 85707 root      20   0  163096   3320   1584 R   0.7  0.0   0:00.10 top              </span><br><span class="line">   785 root      39  19       0      0      0 R   0.3  0.0   4154:39 kipmi0           </span><br><span class="line">  2048 zabbixs+  20   0 7643260   4740   2212 S   0.3  0.0   1:00.49 zabbix_server    </span><br><span class="line">  2228 zabbixs+  20   0 7646732   7212   4400 S   0.3  0.0   3:17.22 zabbix_server    </span><br><span class="line">  2546 zabbixs+  20   0 7646852   7236   4404 S   0.3  0.0   3:22.93 zabbix_server    </span><br><span class="line"> 48226 root      20   0 2366696  57548  16872 S   0.3  0.1  67:27.70 containerd       </span><br><span class="line"> 62322 root      20   0       0      0      0 S   0.3  0.0   0:00.91 kworker/u448:0   </span><br><span class="line">     1 root      20   0  191164   4068   2464 S   0.0  0.0  16:17.96 systemd          </span><br><span class="line">     2 root      20   0       0      0      0 S   0.0  0.0   0:01.82 kthreadd         </span><br><span class="line">     3 root      20   0       0      0      0 S   0.0  0.0   0:39.27 ksoftirqd/0      </span><br><span class="line">     5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H     </span><br><span class="line">     8 root      rt   0       0      0      0 S   0.0  0.0   0:01.23 migration/0      </span><br></pre></td></tr></table></figure><p>默认的列有如下：</p><table><thead><tr><th align="left">列</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">PID</td><td align="left">进程ID，唯一标识符。</td></tr><tr><td align="left">USER</td><td align="left">进程所有者的实际用户名。</td></tr><tr><td align="left">PR</td><td align="left">进程的调度优先级。这个字段的一些值是’rt’。这意味这这些进程运行在实时态。</td></tr><tr><td align="left">NI</td><td align="left">进程的nice值（优先级）。越小的值意味着越高的优先级。</td></tr><tr><td align="left">VIRT</td><td align="left">进程使用的虚拟内存。</td></tr><tr><td align="left">RES</td><td align="left">驻留内存大小。驻留内存是任务使用的非交换物理内存大小。</td></tr><tr><td align="left">SHR</td><td align="left">进程使用的共享内存。</td></tr><tr><td align="left">S</td><td align="left">这个是进程的状态。它有D/R/S/T/Z/I</td></tr><tr><td align="left">%CPU</td><td align="left">自从上一次更新时到现在任务所使用的CPU时间百分比。</td></tr><tr><td align="left">%MEM</td><td align="left">进程使用的可用物理内存百分比。</td></tr><tr><td align="left">TIME+</td><td align="left">任务启动后到现在所使用的全部CPU时间，精确到百分之一秒。</td></tr><tr><td align="left">COMMAND</td><td align="left">运行进程所使用的命令。</td></tr></tbody></table><p>关于S，有如下状态：</p><table><thead><tr><th align="left">类型</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">D</td><td align="left">Disk Sleep，不可中断睡眠，一般为进程正在与硬件交互。</td></tr><tr><td align="left">R</td><td align="left">Running，运行中。</td></tr><tr><td align="left">S</td><td align="left">Interruptible Sleep，可中断睡眠，表示进程因为等待某个事件而被系统挂起。当进程等待的事件发生时，它会被唤醒并进入R。</td></tr><tr><td align="left">T</td><td align="left">Traced/Stopped，调试器会触发Traced，发送SIGSTOP信号会触发Stopped。</td></tr><tr><td align="left">Z</td><td align="left">Zombie，僵尸进程，父进程结束但未回收资源。</td></tr><tr><td align="left">I</td><td align="left">Idle，空闲状态，一般不会消耗资源。</td></tr></tbody></table><h2 id="交互命令"><a href="#交互命令" class="headerlink" title="交互命令"></a>交互命令</h2><h3 id="h"><a href="#h" class="headerlink" title="h"></a>h</h3><p>输入h，出现帮助手册。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Help for Interactive Commands - procps-ng version 3.3.10</span><br><span class="line">Window 1:Def: Cumulative mode Off.  System: Delay 3.0 secs; Secure mode Off.</span><br><span class="line"></span><br><span class="line">  Z,B,E,e   Global: &#x27;Z&#x27; colors; &#x27;B&#x27; bold; &#x27;E&#x27;/&#x27;e&#x27; summary/task memory scale</span><br><span class="line">  l,t,m     Toggle Summary: &#x27;l&#x27; load avg; &#x27;t&#x27; task/cpu stats; &#x27;m&#x27; memory info</span><br><span class="line">  0,1,2,3,I Toggle: &#x27;0&#x27; zeros; &#x27;1/2/3&#x27; cpus or numa node views; &#x27;I&#x27; Irix mode</span><br><span class="line">  f,F,X     Fields: &#x27;f&#x27;/&#x27;F&#x27; add/remove/order/sort; &#x27;X&#x27; increase fixed-width</span><br><span class="line"></span><br><span class="line">  L,&amp;,&lt;,&gt; . Locate: &#x27;L&#x27;/&#x27;&amp;&#x27; find/again; Move sort column: &#x27;&lt;&#x27;/&#x27;&gt;&#x27; left/right</span><br><span class="line">  R,H,V,J . Toggle: &#x27;R&#x27; Sort; &#x27;H&#x27; Threads; &#x27;V&#x27; Forest view; &#x27;J&#x27; Num justify</span><br><span class="line">  c,i,S,j . Toggle: &#x27;c&#x27; Cmd name/line; &#x27;i&#x27; Idle; &#x27;S&#x27; Time; &#x27;j&#x27; Str justify</span><br><span class="line">  x,y     . Toggle highlights: &#x27;x&#x27; sort field; &#x27;y&#x27; running tasks</span><br><span class="line">  z,b     . Toggle: &#x27;z&#x27; color/mono; &#x27;b&#x27; bold/reverse (only if &#x27;x&#x27; or &#x27;y&#x27;)</span><br><span class="line">  u,U,o,O . Filter by: &#x27;u&#x27;/&#x27;U&#x27; effective/any user; &#x27;o&#x27;/&#x27;O&#x27; other criteria</span><br><span class="line">  n,#,^O  . Set: &#x27;n&#x27;/&#x27;#&#x27; max tasks displayed; Show: Ctrl+&#x27;O&#x27; other filter(s)</span><br><span class="line">  C,...   . Toggle scroll coordinates msg for: up,down,left,right,home,end</span><br><span class="line"></span><br><span class="line">  k,r       Manipulate tasks: &#x27;k&#x27; kill; &#x27;r&#x27; renice</span><br><span class="line">  d or s    Set update interval</span><br><span class="line">  W,Y       Write configuration file &#x27;W&#x27;; Inspect other output &#x27;Y&#x27;</span><br><span class="line">  q         Quit</span><br><span class="line">          ( commands shown with &#x27;.&#x27; require a visible task display window ) </span><br><span class="line">Press &#x27;h&#x27; or &#x27;?&#x27; for help with Windows,</span><br><span class="line">Type &#x27;q&#x27; or &lt;Esc&gt; to continue </span><br></pre></td></tr></table></figure><h3 id="Space-Enter"><a href="#Space-Enter" class="headerlink" title="Space/Enter"></a>Space/Enter</h3><p>手动刷新，That’s all。</p><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>这个命令在全屏和交替模式间切换。在交替模式下会显示4个窗口:</p><ul><li>Def-默认字段</li><li>Job-任务字段组</li><li>Mem-内存字段组</li><li>Usr-用户字段组</li></ul><p>这四组字段共有一个独立的可配置的概括区域和它自己的可配置任务区域。4个窗口中只有一个窗口是当前窗口。当前窗口的名称显示在左上方，交互命令只有在当前窗口有效。</p><p>可以使用a/w进行窗口切换。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1:Def - 15:55:22 up 103 days,  2:48,  1 user,  load average: 0.27, 0.16, 0.15</span><br><span class="line">Tasks: 1064 total,   1 running, 1063 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  0.2 us,  0.4 sy,  0.0 ni, 99.3 id,  0.1 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem : 65420768 total, 27620432 free,  4143136 used, 33657200 buff/cache</span><br><span class="line">KiB Swap: 16777212 total, 16777212 free,        0 used. 60318688 avail Mem </span><br><span class="line"></span><br><span class="line">1   PID     USER  PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+          COMMAND</span><br><span class="line"> 165745     root  20   0 3486224  41372  10268 S   3.6  0.1   3636:07        vcs-agent</span><br><span class="line">  85707     root  20   0  163096   3348   1600 R   1.6  0.0   0:10.35              top</span><br><span class="line"> 135975     root  20   0       0      0      0 S   1.0  0.0   0:11.88   kworker/u449:2</span><br><span class="line">     10     root  20   0       0      0      0 S   0.5  0.0 169:29.55        rcu_sched</span><br><span class="line">   2392 zabbixs+  20   0 7646732   7216   4404 S   0.5  0.0   3:34.37    zabbix_server</span><br><span class="line">   2416 zabbixs+  20   0 7646748   7228   4400 S   0.5  0.0   3:25.69    zabbix_server</span><br><span class="line">   2659 zabbixs+  20   0 7538696   2196    772 S   0.5  0.0  74:29.38    zabbix_server</span><br><span class="line">  48226     root  20   0 2366696  57464  16872 S   0.5  0.1  67:36.83       containerd</span><br><span class="line">2   PID   PPID     TIME+  %CPU %MEM  PR  NI S    VIRT    RES   UID COMMAND            </span><br><span class="line"> 222119 221078   3:28.78   0.0  0.0  20   0 S  444940  22272    48 php-fpm            </span><br><span class="line"> 221187      2   0:00.13   0.0  0.0  20   0 S       0      0     0 kworker/12:2       </span><br><span class="line"> 221084 221078   3:33.70   0.0  0.0  20   0 S  442892  20512    48 php-fpm            </span><br><span class="line"> 221083 221078   3:27.54   0.0  0.0  20   0 S  442876  20048    48 php-fpm            </span><br><span class="line"> 221082 221078   3:27.58   0.0  0.0  20   0 S  442632  19916    48 php-fpm            </span><br><span class="line"> 221081 221078   3:28.20   0.0  0.0  20   0 S  446976  24556    48 php-fpm            </span><br><span class="line"> 221080 221078   3:25.92   0.0  0.0  20   0 S  442896  19820    48 php-fpm            </span><br><span class="line"> 221078      1   2:25.13   0.0  0.0  20   0 S  431568  15696     0 php-fpm            </span><br><span class="line"> 217972 221078   3:08.63   0.0  0.0  20   0 S  442096  19300    48 php-fpm            </span><br><span class="line">3   PID %MEM    VIRT    RES   CODE    DATA    SHR nMaj nDRT  %CPU COMMAND             </span><br><span class="line"> 179000  1.1 16.613g 747632  13000 16.547g  10260    0    0   0.0 mysqld              </span><br><span class="line">  54620  0.9 1067624 570548      4  928560   3268    0    0   0.0 python3             </span><br><span class="line">  49479  0.2 2559012 100956  64656 2402868  31908    0    0   0.0 dockerd             </span><br><span class="line">  48226  0.1 2366696  57464  36928 2302580  16872    0    0   0.5 containerd          </span><br><span class="line"> 165746  0.1 2771720  47136  12068 2734376  11968    0    0   0.0 agent-guan          </span><br><span class="line"> 165745  0.1 3486224  41372  17632 3457816  10268    0    0   3.6 vcs-agent           </span><br><span class="line"> 150146  0.1  856720  39908      4  499320   6080    0    0   0.0 salt-minion         </span><br><span class="line"> 165604  0.1 2172220  34436   5420 2125284   6412    0    0   0.0 supervisor          </span><br><span class="line">  10095  0.1 2297068  34136  24828 2260848   9020    0    0   0.0 filebeat632         </span><br><span class="line">4   PID   PPID   UID USER     RUSER    TTY          TIME+  %CPU %MEM S COMMAND        </span><br><span class="line">   2018      1   993 zabbixs+ zabbixs+ ?          0:00.27   0.0  0.0 S zabbix_server  </span><br><span class="line">   2036   2018   993 zabbixs+ zabbixs+ ?         19:00.24   0.0  0.0 S zabbix_server  </span><br><span class="line">   2037   2018   993 zabbixs+ zabbixs+ ?          0:58.12   0.0  0.0 S zabbix_server  </span><br><span class="line">   2038   2018   993 zabbixs+ zabbixs+ ?          1:43.64   0.0  0.0 S zabbix_server  </span><br><span class="line">   2039   2018   993 zabbixs+ zabbixs+ ?          2:31.94   0.0  0.0 S zabbix_server  </span><br><span class="line">   2040   2018   993 zabbixs+ zabbixs+ ?          0:59.83   0.0  0.0 S zabbix_server  </span><br><span class="line">   2041   2018   993 zabbixs+ zabbixs+ ?          1:01.25   0.0  0.0 S zabbix_server  </span><br><span class="line">   2042   2018   993 zabbixs+ zabbixs+ ?          1:02.12   0.0  0.0 S zabbix_server  </span><br><span class="line">   2043   2018   993 zabbixs+ zabbixs+ ?          1:01.96   0.0  0.0 S zabbix_server</span><br></pre></td></tr></table></figure><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>Bold，会让top部分关键字加粗。</p><h3 id="c"><a href="#c" class="headerlink" title="c"></a>c</h3><p>切换是否显示进程启动时的完整路径和程序名。</p><h3 id="d-s"><a href="#d-s" class="headerlink" title="d/s"></a>d/s</h3><p>时间间隔，如下，我输入了10，即10秒后刷新输出一次top信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1:Def - 15:58:10 up 103 days,  2:51,  1 user,  load average: 0.16, 0.15, 0.14</span><br><span class="line">Tasks: 1069 total,   1 running, 1068 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem : 65420768 total, 27623968 free,  4139288 used, 33657512 buff/cache</span><br><span class="line">KiB Swap: 16777212 total, 16777212 free,        0 used. 60322876 avail Mem </span><br><span class="line">Change delay from 3.0 to 10</span><br></pre></td></tr></table></figure><h3 id="f"><a href="#f" class="headerlink" title="f"></a>f</h3><p>选择字段，*为已选择的字段。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Fields Management for window 1:Def, whose current sort field is %CPU</span><br><span class="line">   Navigate with Up/Dn, Right selects for move then &lt;Enter&gt; or Left commits,</span><br><span class="line">   &#x27;d&#x27; or &lt;Space&gt; toggles display, &#x27;s&#x27; sets sort.  Use &#x27;q&#x27; or &lt;Esc&gt; to end!</span><br><span class="line"></span><br><span class="line">* PID     = Process Id             vMn     = Minor Faults delta  </span><br><span class="line">* USER    = Effective User Name    USED    = Res+Swap Size (KiB) </span><br><span class="line">* PR      = Priority               nsIPC   = IPC namespace Inode </span><br><span class="line">* NI      = Nice Value             nsMNT   = MNT namespace Inode </span><br><span class="line">* VIRT    = Virtual Image (KiB)    nsNET   = NET namespace Inode </span><br><span class="line">* RES     = Resident Size (KiB)    nsPID   = PID namespace Inode </span><br><span class="line">* SHR     = Shared Memory (KiB)    nsUSER  = USER namespace Inode</span><br><span class="line">* S       = Process Status         nsUTS   = UTS namespace Inode </span><br><span class="line">* %CPU    = CPU Usage           </span><br><span class="line">* %MEM    = Memory Usage (RES)  </span><br><span class="line">* TIME+   = CPU Time, hundredths</span><br><span class="line">* COMMAND = Command Name/Line   </span><br><span class="line">  PPID    = Parent Process pid  </span><br><span class="line">  UID     = Effective User Id   </span><br><span class="line">  RUID    = Real User Id        </span><br><span class="line">  RUSER   = Real User Name      </span><br><span class="line">  SUID    = Saved User Id       </span><br><span class="line">  SUSER   = Saved User Name     </span><br><span class="line">  GID     = Group Id            </span><br><span class="line">  GROUP   = Group Name          </span><br><span class="line">  PGRP    = Process Group Id    </span><br><span class="line">  TTY     = Controlling Tty     </span><br><span class="line">  TPGID   = Tty Process Grp Id  </span><br><span class="line">  SID     = Session Id          </span><br><span class="line">  nTH     = Number of Threads   </span><br><span class="line">  P       = Last Used Cpu (SMP) </span><br><span class="line">  TIME    = CPU Time            </span><br><span class="line">  SWAP    = Swapped Size (KiB)  </span><br><span class="line">  CODE    = Code Size (KiB)     </span><br><span class="line">  DATA    = Data+Stack (KiB)    </span><br><span class="line">  nMaj    = Major Page Faults   </span><br><span class="line">  nMin    = Minor Page Faults   </span><br><span class="line">  nDRT    = Dirty Pages Count   </span><br><span class="line">  WCHAN   = Sleeping in Function</span><br><span class="line">  Flags   = Task Flags &lt;sched.h&gt;</span><br><span class="line">  CGROUPS = Control Groups      </span><br><span class="line">  SUPGIDS = Supp Groups IDs     </span><br><span class="line">  SUPGRPS = Supp Groups Names   </span><br><span class="line">  TGID    = Thread Group Id     </span><br><span class="line">  ENVIRON = Environment vars    </span><br><span class="line">  vMj     = Major Faults delta  </span><br></pre></td></tr></table></figure><h3 id="i"><a href="#i" class="headerlink" title="i"></a>i</h3><p>空闲任务列表。</p><h3 id="k"><a href="#k" class="headerlink" title="k"></a>k</h3><p>输入PID，结束任务。</p><h3 id="l-t-m"><a href="#l-t-m" class="headerlink" title="l/t/m"></a>l/t/m</h3><p>l-不显示load average和uptime<br>t-进度条显示cpu信息/不显示cpu信息<br>m-进度条显示内存信息/不显示内存信息</p><h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><p>切换进程的默认排序/PID顺序排序。</p><h3 id="r"><a href="#r" class="headerlink" title="r"></a>r</h3><p>设置任务优先级。</p><h3 id="V"><a href="#V" class="headerlink" title="V"></a>V</h3><p>将进程切换显示到树形图。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                       </span><br><span class="line">     1 root      20   0  191164   4068   2464 S   0.0  0.0  16:18.29 systemd                                                                                                       </span><br><span class="line">   671 root      20   0   39576   9024   8540 S   0.0  0.0   0:21.75  `- systemd-journal                                                                                           </span><br><span class="line">   692 root      20   0  129176   1312    964 S   0.0  0.0   0:00.00  `- lvmetad                                                                                                   </span><br><span class="line">   965 libstor+  20   0    8580    824    676 S   0.0  0.0   0:08.84  `- lsmd                                                                                                      </span><br><span class="line">   968 root      20   0   22076   1708   1004 S   0.0  0.0  40:03.04  `- irqbalance                                                                                                </span><br><span class="line">   971 root      20   0   53452   3168   2296 S   0.0  0.0   0:00.37  `- smartd                                                                                                    </span><br><span class="line">   972 root      20   0    6520    648    532 S   0.0  0.0  13:03.17  `- rngd                                                                                                      </span><br><span class="line">   980 root      20   0  224476   6156   4300 S   0.0  0.0   0:56.00  `- abrtd                                                                                                     </span><br><span class="line">   987 root      20   0  221876   4964   3536 S   0.0  0.0   0:00.10  `- abrt-watch-log                                                                                            </span><br><span class="line">  1001 dbus      20   0   60324   2548   1852 S   0.0  0.0   4:30.10  `- dbus-daemon                                                                                               </span><br><span class="line">  1267 root      20   0  110380   4200   3212 S   0.0  0.0   0:00.26  `- sshd                                                                                                      </span><br><span class="line"> 59370 root      20   0  159168   6240   4868 S   0.0  0.0   0:00.45      `- sshd                                                                                                  </span><br><span class="line"> 59372 root      20   0  116720   3376   1812 S   0.0  0.0   0:00.05          `- bash                                                                                              </span><br><span class="line">110500 root      20   0  163276   3316   1584 R   1.0  0.0   0:00.16              `- top</span><br></pre></td></tr></table></figure><h3 id="x-y"><a href="#x-y" class="headerlink" title="x/y"></a>x/y</h3><p>高亮当前任务所在行列，开启彩色输出后会更明显。<br>![高亮后的效果]](/images/Snipaste_2021-01-25_16-12-57.png)</p><h3 id="u"><a href="#u" class="headerlink" title="u"></a>u</h3><p>特定用户进程显示，输入用户名后只显示该用户进程，空白则显示全部用户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">top - 16:14:37 up 103 days,  3:07,  1 user,  load average: 0.25, 0.21, 0.16</span><br><span class="line">Tasks: 1068 total,   1 running, 1067 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta">%</span><span class="bash">Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span></span><br><span class="line">KiB Mem : 65420768 total, 27627364 free,  4133004 used, 33660400 buff/cache</span><br><span class="line">KiB Swap: 16777212 total, 16777212 free,        0 used. 60329688 avail Mem </span><br><span class="line">Which user (blank for all) root</span><br><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                       </span><br><span class="line">     1 root      20   0  191164   4068   2464 S   0.0  0.0  16:18.36 systemd                                                                                                       </span><br><span class="line">   671 root      20   0   39576   9024   8540 S   0.0  0.0   0:21.76  `- systemd-journal                                                                                           </span><br><span class="line">   692 root      20   0  129176   1312    964 S   0.0  0.0   0:00.00  `- lvmetad                                                                                                   </span><br><span class="line">   968 root      20   0   22076   1708   1004 S   0.0  0.0  40:03.20  `- irqbalance                                                                                                </span><br><span class="line">   971 root      20   0   53452   3168   2296 S   0.0  0.0   0:00.37  `- smartd                                                                                                    </span><br><span class="line">   972 root      20   0    6520    648    532 S   0.0  0.0  13:03.23  `- rngd                                                                                                      </span><br><span class="line">   980 root      20   0  224476   6156   4300 S   0.0  0.0   0:56.00  `- abrtd                                                                                                     </span><br><span class="line">   987 root      20   0  221876   4964   3536 S   0.0  0.0   0:00.10  `- abrt-watch-log                                                                                            </span><br><span class="line">  1267 root      20   0  110380   4200   3212 S   0.0  0.0   0:00.26  `- sshd                                                                                                      </span><br><span class="line"> 59370 root      20   0  159168   6240   4868 S   0.0  0.0   0:00.52      `- sshd                                                                                                  </span><br><span class="line"> 59372 root      20   0  116720   3376   1812 S   0.0  0.0   0:00.05          `- bash                                                                                              </span><br><span class="line">112478 root      20   0  163196   3432   1640 R   0.4  0.0   0:03.13              `- top                                                                                           </span><br><span class="line">  1348 root      20   0   24264   1596   1328 S   0.0  0.0   1:26.09  `- systemd-logind                                                                                            </span><br><span class="line">  1418 root      20   0  126412   1660    984 S   0.0  0.0   0:56.25  `- crond                                                                                                     </span><br><span class="line">  1427 root      20   0   25904    944    744 S   0.0  0.0   0:00.03  `- atd                                                                                                       </span><br><span class="line">  1961 root      20   0  110192    852    720 S   0.0  0.0   0:00.00  `- agetty                                                                                                    </span><br><span class="line">  1964 root      20   0  110192    844    712 S   0.0  0.0   0:00.00  `- agetty                                                                                                    </span><br><span class="line">151369 root      20   0   43944   1860   1348 S   0.0  0.0   0:00.05  `- systemd-udevd                                                                                             </span><br><span class="line">213155 root      20   0  228352  11212   6492 S   0.0  0.0  60:09.78  `- snmpd                                                                                                     </span><br><span class="line"> 54620 root      20   0 1067624 570564   3268 S   0.0  0.9  51:44.38  `- python3                                                                                                   </span><br><span class="line">150137 root      20   0  289656  19268   4748 S   0.0  0.0   0:00.12  `- salt-minion                                                                                               </span><br><span class="line">150146 root      20   0  856720  39908   6080 S   0.1  0.1 112:59.09      `- salt-minion                                                                                           </span><br><span class="line">150150 root      20   0  403088  18752    796 S   0.0  0.0   0:00.00          `- salt-minion</span><br></pre></td></tr></table></figure><h3 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h3><p>可为不同的任务区改变配色/粗体等设置。</p><h3 id="z"><a href="#z" class="headerlink" title="z"></a>z</h3><p>切换彩色/单色输出。</p><h3 id="n"><a href="#n" class="headerlink" title="n/#"></a>n/#</h3><p>设置最大显示任务数量。</p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="b"><a href="#b" class="headerlink" title="-b"></a>-b</h3><p>批处理模式启动top。</p><h3 id="c-1"><a href="#c-1" class="headerlink" title="-c"></a>-c</h3><p>这个选项会以上次记住的程序/命令显示的状态显示（是否显示完整路径）。</p><h3 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h3><p>时间间隔，后面带整数，以秒计算。</p><h3 id="i-1"><a href="#i-1" class="headerlink" title="-i"></a>-i</h3><p>显示空闲进程。</p><h3 id="n-1"><a href="#n-1" class="headerlink" title="-n"></a>-n</h3><p>刷新次数，带整数，输入10则刷新10次后自动退出。</p><h3 id="p"><a href="#p" class="headerlink" title="-p"></a>-p</h3><p>监控特定PID。</p><h3 id="u-U"><a href="#u-U" class="headerlink" title="-u/-U"></a>-u/-U</h3><p>监控特定用户/UID。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux中的top命令显示系统上正在运行的进程。它是系统管理员最重要的工具之一。被广泛用于监视服务器的负载和进程。&lt;br&gt;（各个发行版的top可能会有出入，请参照对应系统的–help和man，以下展示均在centos7.4上完成。）&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Linux" scheme="https://laplacence.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>cisco NXOS 终端技巧</title>
    <link href="https://laplacence.github.io/2020/11/03/cisco_nxos_tips_and_tricks/"/>
    <id>https://laplacence.github.io/2020/11/03/cisco_nxos_tips_and_tricks/</id>
    <published>2020-11-02T16:00:00.000Z</published>
    <updated>2020-11-05T07:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面展示了一些可以增强NX-OS故障排查经验的技巧。</p><span id="more"></span><h2 id="十六进制-十进制转换"><a href="#十六进制-十进制转换" class="headerlink" title="十六进制/十进制转换"></a>十六进制/十进制转换</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> hex 100</span></span><br><span class="line">0x64</span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> dec 0x64</span></span><br><span class="line">100</span><br></pre></td></tr></table></figure><p>注：hex 和 dec 均为隐藏命令。</p><h2 id="一次执行多个命令"><a href="#一次执行多个命令" class="headerlink" title="一次执行多个命令"></a>一次执行多个命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> show clock ; show switchname ; show ip int brie</span></span><br><span class="line">09:00:00.642 CST Wed Nov 01 2020</span><br><span class="line">Nexus</span><br><span class="line">IP Interface Status for VRF &quot;default&quot;(1)</span><br><span class="line">Interface           IP Address     Interface Status</span><br><span class="line"><span class="meta">Nexus#</span></span><br></pre></td></tr></table></figure><p>注：命令可简写/后续命令无法Tab或?</p><h2 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> conf t ; hostname NXOSSW ; end</span></span><br><span class="line">Enter configuration commands, one per line. End with CNTL/Z.</span><br><span class="line"><span class="meta">NXOSSW#</span></span><br></pre></td></tr></table></figure><h2 id="查看命令执行时间"><a href="#查看命令执行时间" class="headerlink" title="查看命令执行时间"></a>查看命令执行时间</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> show clock ; show run | ex .* ; show clock</span></span><br><span class="line">11:15:24.510 CST Wed Nov 01 2020</span><br><span class="line">11:15:24.576 CST Wed Nov 01 2020</span><br><span class="line"><span class="meta">Nexus#</span></span><br></pre></td></tr></table></figure><h2 id="tech-support文件输出"><a href="#tech-support文件输出" class="headerlink" title="tech-support文件输出"></a>tech-support文件输出</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> tac-pac</span></span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> dir volatile:</span></span><br><span class="line">        0   Jan 01 08:02:16 2001 nginx_logflag</span><br><span class="line">    926120   Nov 01 16:49:56 2020 show_tech_out.gz</span><br><span class="line">​</span><br><span class="line">Usage for volatile://sup-local</span><br><span class="line">    937984 bytes used</span><br><span class="line">103919616 bytes free</span><br><span class="line">104857600 bytes total</span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"></span></span><br><span class="line"><span class="bash">Nexus<span class="comment"># tac-pac bootflash:</span></span></span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> dir bootflash: | i show_tech_out</span></span><br><span class="line">  926120   Nov 01 17:36:36 2020 show_tech_out.gz</span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"></span></span><br><span class="line"><span class="bash">Nexus<span class="comment"># tac-pac bootflash:20191106-show-tech.gz</span></span></span><br><span class="line"><span class="meta">Nexus#</span></span><br></pre></td></tr></table></figure><p>注：使用传统 show tech-support 方式获取该文件有时会非常大而且需要非常长的时间去生成，并且会弹到终端内刷新页面。<br>nexus设备可以使用tac-pac命令替代，输入命令回车后等待一段时间后，自动生成show_tech_out.gz文件，默认保存在volatile:中。<br>推荐使用tac-pac bootflash:，保存在bootflash:里，之后可以通过FTP等方式导出。</p><h2 id="使用CLI变量"><a href="#使用CLI变量" class="headerlink" title="使用CLI变量"></a>使用CLI变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> show cli variables</span></span><br><span class="line">VSH Variable List (* = session vars)</span><br><span class="line">-----------------</span><br><span class="line">SWITCHNAME=&quot;Nexus&quot;</span><br><span class="line">TIMESTAMP=&quot;2020-11-01-15.09.50&quot;</span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"></span></span><br><span class="line"><span class="bash">Nexus<span class="comment"># tac-pac bootflash:$(SWITCHNAME)-$(TIMESTAMP)-show-tech-out.gz</span></span></span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> dir bootflash: | i show-tech-out</span></span><br><span class="line">  926120   Nov 02 08:56:36 2020 Nexus-2020-11-01-15.14.15-show-tech-out.gz</span><br></pre></td></tr></table></figure><h2 id="使用cli-alias"><a href="#使用cli-alias" class="headerlink" title="使用cli alias"></a>使用cli alias</h2><h3 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> <span class="built_in">alias</span></span></span><br><span class="line">CLI alias commands</span><br><span class="line">==================</span><br><span class="line">alias           :show cli alias</span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> show cli <span class="built_in">alias</span></span></span><br><span class="line">CLI alias commands</span><br><span class="line">==================</span><br><span class="line">alias           :show cli alias</span><br><span class="line"><span class="meta">Nexus#</span></span><br></pre></td></tr></table></figure><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus(config)#</span><span class="bash"> cli <span class="built_in">alias</span> name shiib show ip int brief</span></span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> shiib</span></span><br><span class="line">IP Interface Status for VRF &quot;default&quot;(1)</span><br><span class="line">Interface           IP Address     Interface Status</span><br><span class="line">Vlan100             1.1.1.1        protocol-up/link-up/admin-up</span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"></span></span><br><span class="line"><span class="bash">Nexus<span class="comment"># show cli alias</span></span></span><br><span class="line">CLI alias commands</span><br><span class="line">==================</span><br><span class="line">alias           :show cli alias</span><br><span class="line">shiib           :show ip int brief</span><br><span class="line"><span class="meta">Nexus#</span></span><br></pre></td></tr></table></figure><h3 id="基于终端会话临时配置"><a href="#基于终端会话临时配置" class="headerlink" title="基于终端会话临时配置"></a>基于终端会话临时配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> terminal <span class="built_in">alias</span> shiib show ip int brief</span></span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> shiib</span></span><br><span class="line">IP Interface Status for VRF &quot;default&quot;(1)</span><br><span class="line">Interface           IP Address     Interface Status</span><br><span class="line">Vlan100             1.1.1.1        protocol-up/link-up/admin-up</span><br><span class="line"><span class="meta">Nexus#</span></span><br></pre></td></tr></table></figure><h3 id="使用cli-alias-amp-一次性执行多个命令"><a href="#使用cli-alias-amp-一次性执行多个命令" class="headerlink" title="使用cli alias &amp; 一次性执行多个命令"></a>使用cli alias &amp; 一次性执行多个命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> terminal <span class="built_in">alias</span> shall show clock ; show switchname ; show ip int brief</span></span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> shall</span></span><br><span class="line">15:25:33.097 UTC Thu Nov 05 2020</span><br><span class="line">Time source is NTP</span><br><span class="line">Nexus</span><br><span class="line"></span><br><span class="line">IP Interface Status for VRF &quot;default&quot;(1)</span><br><span class="line">Interface            IP Address      Interface Status</span><br><span class="line"><span class="meta">Nexus#</span></span><br></pre></td></tr></table></figure><p>注：全局或会话alias，show 或 config命令都可以组合尝试。</p><h2 id="定制终端设置"><a href="#定制终端设置" class="headerlink" title="定制终端设置"></a>定制终端设置</h2><h3 id="终端会话超时"><a href="#终端会话超时" class="headerlink" title="终端会话超时"></a>终端会话超时</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> show terminal | <span class="keyword">in</span> Timeout</span></span><br><span class="line">Session Timeout: 30 minutes</span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"></span></span><br><span class="line"><span class="bash">Nexus<span class="comment"># terminal session-timeout ?</span></span></span><br><span class="line">&lt;0-525600&gt; Enter timeout in minutes, 0 to disable</span><br><span class="line">​</span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> terminal session-timeout 0</span></span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> show terminal | <span class="keyword">in</span> Timeout</span></span><br><span class="line">Session Timeout: 0 minutes</span><br></pre></td></tr></table></figure><h3 id="显示终端的宽度长度"><a href="#显示终端的宽度长度" class="headerlink" title="显示终端的宽度长度"></a>显示终端的宽度长度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> show terminal | <span class="keyword">in</span> Length</span></span><br><span class="line">Length: 43 lines, Width: 152 columns</span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> terminal length 35</span></span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> show terminal | <span class="keyword">in</span> Length</span></span><br><span class="line">Length: 35 lines, Width: 152 columns</span><br><span class="line"><span class="meta">Nexus#</span></span><br></pre></td></tr></table></figure><h3 id="延迟命令执行"><a href="#延迟命令执行" class="headerlink" title="延迟命令执行"></a>延迟命令执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> show clock ; sleep 2 ; show clock</span></span><br><span class="line">15:30:36.009 UTC Thu Nov 05 2020</span><br><span class="line">Time source is NTP</span><br><span class="line">15:30:38.022 UTC Thu Nov 05 2020</span><br><span class="line">Time source is NTP</span><br><span class="line"><span class="meta">Nexus#</span></span><br></pre></td></tr></table></figure><h2 id="查看其他vrf的路由"><a href="#查看其他vrf的路由" class="headerlink" title="查看其他vrf的路由"></a>查看其他vrf的路由</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">Nexus#</span><span class="bash"> routing-context vrf management</span></span><br><span class="line"><span class="meta">Nexus%</span><span class="bash">management<span class="comment"># sh ip route</span></span></span><br><span class="line">IP Route Table for VRF &quot;management&quot;</span><br><span class="line">&#x27;*&#x27; denotes best ucast next-hop</span><br><span class="line">&#x27;**&#x27; denotes best mcast next-hop</span><br><span class="line">&#x27;[x/y]&#x27; denotes [preference/metric]</span><br><span class="line">&#x27;%&lt;string&gt;&#x27; in via output denotes VRF &lt;string&gt;</span><br><span class="line">​</span><br><span class="line">0.0.0.0/0, ubest/mbest: 1/0</span><br><span class="line">  *via 11.1.1.1, [1/0], 6w5d, static</span><br><span class="line">11.1.1.0/24, ubest/mbest: 1/0, attached</span><br><span class="line">  *via 11.1.1.2, mgmt0, [0/0], 6w6d, direct</span><br><span class="line">11.1.1.2/32, ubest/mbest: 1/0, attached</span><br><span class="line">  *via 11.1.1.2, mgmt0, [0/0], 6w6d, local</span><br><span class="line"><span class="meta">Nexus%</span><span class="bash">management<span class="comment"># routing-context vrf default</span></span></span><br><span class="line"><span class="meta">Nexus#</span><span class="bash"> sh ip route</span></span><br><span class="line">IP Route Table for VRF &quot;default&quot;</span><br><span class="line">&#x27;*&#x27; denotes best ucast next-hop</span><br><span class="line">&#x27;**&#x27; denotes best mcast next-hop</span><br><span class="line">&#x27;[x/y]&#x27; denotes [preference/metric]</span><br><span class="line">&#x27;%&lt;string&gt;&#x27; in via output denotes VRF &lt;string&gt;</span><br><span class="line">​</span><br><span class="line">0.0.0.0/0, ubest/mbest: 1/0</span><br><span class="line">  *via 10.1.1.1, [1/0], 6w5d, static</span><br><span class="line">10.1.1.0/24, ubest/mbest: 1/0, attached</span><br><span class="line">  *via 10.1.1.2, Vlan1, [0/0], 6w5d, direct</span><br><span class="line">10.1.1.2/32, ubest/mbest: 1/0, attached</span><br><span class="line">  *via 10.1.1.2, Vlan1, [0/0], 6w5d, local</span><br><span class="line"><span class="meta">Nexus#</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;下面展示了一些可以增强NX-OS故障排查经验的技巧。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="network" scheme="https://laplacence.github.io/categories/network/"/>
    
    
  </entry>
  
  <entry>
    <title>cisco NXOS 大版本升级导致的故障</title>
    <link href="https://laplacence.github.io/2020/10/20/cisco_nxos_update_error/"/>
    <id>https://laplacence.github.io/2020/10/20/cisco_nxos_update_error/</id>
    <published>2020-10-19T16:00:00.000Z</published>
    <updated>2020-11-05T07:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>前不久升级一台比较老旧的Nexus3000 Series，结果就碰到了这个问题。</p><span id="more"></span><h2 id="升级过程"><a href="#升级过程" class="headerlink" title="升级过程"></a>升级过程</h2><p>这个没什么好说的，就是一系列的常规操作。</p><p>轮流升级，先备后主。<br>确认bootflash大小，备份旧版本bin和kickstart，license。<br>通过厂商给的过渡版本和kickstart文件，以及最新版本的文件。核对md5后上传至交换机。<br>这一步发现新版本的NXOS直接上传会无法直接升级，需要升级到过渡版本后出现新命令compact，通过该命令上传文件至交换机。<br>install过渡版本6，安装前会确认与现网配置是否会冲突和破坏。<br>升级完毕后返回终端，提示10s后重启。<br>重启确认version无误，继续升级新版本7。<br>install过渡版本，安装前会确认与现网配置是否会冲突和破坏。<br>升级完毕后返回终端，提示10s后重启。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>环境是主备两台Nexus3000，做了vpc，没有注意到这点。导致备机升级到新版本7后，版本跨度过大导致主机的vpc产生了未定义的错误，使得主机所有端口errdisable和suspend by vpc，端口都掉了。<br>解决办法是紧急下线主机，备机先单台撑住，把peer-link端口关闭。隔离升级主机版本。<br>升级完后打开端口，好了……</p><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>其实这个问题在cisco的官方guide里面有说明，不支持跨版本的vpc。然而当时厂商给的升级方案也没有注意到这点，结果就崩了……<br>其次没有做下线隔离，因为之前都是让厂商来做。为什么这次没让厂商来做，因为这两台设备已经接近EOL了所以没有续保……</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前不久升级一台比较老旧的Nexus3000 Series，结果就碰到了这个问题。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="network" scheme="https://laplacence.github.io/categories/network/"/>
    
    
  </entry>
  
  <entry>
    <title>用ss来代替netstat</title>
    <link href="https://laplacence.github.io/2020/10/01/using_ss_instead_of_netstat/"/>
    <id>https://laplacence.github.io/2020/10/01/using_ss_instead_of_netstat/</id>
    <published>2020-09-30T16:00:00.000Z</published>
    <updated>2020-09-30T12:34:29.308Z</updated>
    
    <content type="html"><![CDATA[<p>ss是Socket Statistics的缩写。<br>顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p><span id="more"></span><h2 id="为什么要替代"><a href="#为什么要替代" class="headerlink" title="为什么要替代"></a>为什么要替代</h2><p>当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat /proc/net/tcp，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费生命，而用ss才是节省时间。</p><p>ss快的原因，在于用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。(但仍然比netstat要快。)</p><p>为了加速让你去用ss，下面给了一些具体数据。当服务器维持9万个socket连接，Admin需要计算具体的连接数量时，不同情况的耗时如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -at | wc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 55.73s</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ss -atr     | wc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 16.33s</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ss -atr     | wc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.27s (use tcp_diag)</span></span><br></pre></td></tr></table></figure><p>几乎所有的Linux系统都会默认包含netstat命令，但并非所有系统都会默认包含ss命令。</p><p>因为netstat命令是net-tools工具集中的一员：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -q net-tools</span></span><br><span class="line">net-tools-1.60-114.el6.x86_64</span><br></pre></td></tr></table></figure><p>而ss命令是iproute工具集中的一员：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -q iproute</span></span><br><span class="line">iproute-2.6.32-54.el6.x86_64</span><br></pre></td></tr></table></figure><p>如果你无法使用ss命令，那么可能是缺少了iproute，需要安装一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install iproute iproute-doc</span></span><br></pre></td></tr></table></figure><p>net-tools是一套标准的Unix网络工具，用于配置网络接口、设置路由表信息、管理ARP表、显示和统计各类网络信息等等，但是遗憾的是，这个工具自2001年起便不再更新和维护了。</p><p>接替net-tools任务的便是iproute，这是一套可以支持IPv4/IPv6网络的用于管理TCP/UDP/IP网络的工具集，这套工具由Stephen Hemminger负责维护和升级，目前的大版本号是2。</p><p>从某种意义上说，iproute工具集几乎可以替代掉net-tools工具集，具体的替代方案是这样的：</p><table><thead><tr><th>用途</th><th>net-tool</th><th>iproute2</th></tr></thead><tbody><tr><td>地址和链路配置</td><td>ifconfig</td><td>ip addr/ip link</td></tr><tr><td>路由表</td><td>route</td><td>ip route</td></tr><tr><td>邻居</td><td>arp</td><td>ip neigh</td></tr><tr><td>VLAN</td><td>vconfig</td><td>ip link</td></tr><tr><td>隧道</td><td>iptunnel</td><td>ip tunnel</td></tr><tr><td>组播</td><td>ipmaddr</td><td>ip maddr</td></tr><tr><td>统计</td><td>netstat</td><td>ss</td></tr></tbody></table><h2 id="版本和帮助"><a href="#版本和帮助" class="headerlink" title="版本和帮助"></a>版本和帮助</h2><p>想获得ss命令的帮助信息和版本信息，都非常简单，随便敲都能猜到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ss -h</span></span><br><span class="line">Usage: ss [ OPTIONS ]</span><br><span class="line">       ss [ OPTIONS ] [ FILTER ]</span><br><span class="line">   -h, --help           this message</span><br><span class="line">   -V, --version        output version information</span><br><span class="line">   -n, --numeric        don&#x27;t resolve service names</span><br><span class="line">   -r, --resolve       resolve host names</span><br><span class="line">   -a, --all            display all sockets</span><br><span class="line">   -l, --listening      display listening sockets</span><br><span class="line">   -o, --options       show timer information</span><br><span class="line">   -e, --extended      show detailed socket information</span><br><span class="line">   -m, --memory        show socket memory usage</span><br><span class="line">   -p, --processes      show process using socket</span><br><span class="line">   -i, --info           show internal TCP information</span><br><span class="line">   -s, --summary        show socket usage summary</span><br><span class="line"></span><br><span class="line">   -4, --ipv4          display only IP version 4 sockets</span><br><span class="line">   -6, --ipv6          display only IP version 6 sockets</span><br><span class="line">   -0, --packet display PACKET sockets</span><br><span class="line">   -t, --tcp            display only TCP sockets</span><br><span class="line">   -u, --udp            display only UDP sockets</span><br><span class="line">   -d, --dccp           display only DCCP sockets</span><br><span class="line">   -w, --raw            display only RAW sockets</span><br><span class="line">   -x, --unix           display only Unix domain sockets</span><br><span class="line">   -f, --family=FAMILY display sockets of type FAMILY</span><br><span class="line"></span><br><span class="line">   -A, --query=QUERY, --socket=QUERY</span><br><span class="line">       QUERY := &#123;all|inet|tcp|udp|raw|unix|packet|netlink&#125;[,QUERY]</span><br><span class="line"></span><br><span class="line">   -D, --diag=FILE      Dump raw information about TCP sockets to FILE</span><br><span class="line">   -F, --filter=FILE   read filter information from FILE</span><br><span class="line">       FILTER := [ state TCP-STATE ] [ EXPRESSION ]</span><br><span class="line"><span class="meta">$</span><span class="bash"> ss -V</span></span><br><span class="line">ss utility, iproute2-ss091226</span><br></pre></td></tr></table></figure><h2 id="ss选项统计"><a href="#ss选项统计" class="headerlink" title="ss选项统计"></a>ss选项统计</h2><p>ss的选项既不多也不复杂，除去非功能性选项(-h/-V)外，ss共有22个选项。</p><p>实操一波来看看ss有多香。</p><h3 id="查看当前服务器的网络连接统计"><a href="#查看当前服务器的网络连接统计" class="headerlink" title="查看当前服务器的网络连接统计"></a>查看当前服务器的网络连接统计</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ss -s</span></span><br><span class="line">Total: 307 (kernel 375)</span><br><span class="line">TCP:   108 (estab 99, closed 0, orphaned 0, synrecv 0, timewait 0/0), ports 68</span><br><span class="line"></span><br><span class="line">Transport Total     IP        IPv6</span><br><span class="line">*         375       -         -</span><br><span class="line">RAW       0         0         0</span><br><span class="line">UDP       3         3         0</span><br><span class="line">TCP       108       108       0</span><br><span class="line">INET      111       111       0</span><br><span class="line">FRAG      0         0         0</span><br></pre></td></tr></table></figure><h3 id="查看所有监听中的网络端口"><a href="#查看所有监听中的网络端口" class="headerlink" title="查看所有监听中的网络端口"></a>查看所有监听中的网络端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ss -l</span></span><br><span class="line">State      Recv-Q Send-Q   Local Address:Port       Peer Address:Port</span><br><span class="line">LISTEN     0      512     192.168.195.19:16000                 *:*</span><br><span class="line">LISTEN     0      128                  *:10050                 *:*</span><br><span class="line">LISTEN     0      512          127.0.0.1:16007                 *:*</span><br><span class="line">LISTEN     0      512     192.168.195.19:16200                 *:*</span><br><span class="line">LISTEN     0      512          127.0.0.1:16009                 *:*</span><br><span class="line">LISTEN     0      512     192.168.195.19:16010                 *:*</span><br><span class="line">LISTEN     0      512     192.168.195.19:16333                 *:*</span><br><span class="line">LISTEN     0      128                  *:ssh                   *:*</span><br></pre></td></tr></table></figure><p>如果使用-pl参数的话，则会列出具体的程序名称。你会在输出中看到类似于这样的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LISTEN     0      128                 :::http                 :::*        users:((&quot;httpd&quot;,1188,4),(&quot;httpd&quot;,2151,4),(&quot;httpd&quot;,10213,4),(&quot;httpd&quot;,10214,4),(&quot;httpd&quot;,10215,4),(&quot;httpd&quot;,10216,4),(&quot;httpd&quot;,10217,4),(&quot;httpd&quot;,10218,4),(&quot;httpd&quot;,10219,4),(&quot;httpd&quot;,10220,4),(&quot;httpd&quot;,11724,4),(&quot;httpd&quot;,18632,4))</span><br></pre></td></tr></table></figure><p>从中可以知道，某个socket连接是属于httpd的，PID是1188/2151/10213等等。</p><h3 id="查看这台服务器上所有的socket连接"><a href="#查看这台服务器上所有的socket连接" class="headerlink" title="查看这台服务器上所有的socket连接"></a>查看这台服务器上所有的socket连接</h3><p>很简单，直接使用-a选项即可列出所有网络连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ss -a</span></span><br><span class="line">State      Recv-Q Send-Q   Local Address:Port       Peer Address:Port</span><br><span class="line">……</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以配合使用tuwx等参数，例如只查看udp。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ss -au</span></span><br><span class="line">State      Recv-Q Send-Q   Local Address:Port       Peer Address:Port</span><br><span class="line">UNCONN     0      0       192.168.195.19:ntp                   *:*</span><br><span class="line">UNCONN     0      0            127.0.0.1:ntp                   *:*</span><br><span class="line">UNCONN     0      0                    *:ntp                   *:*</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;ss是Socket Statistics的缩写。&lt;br&gt;顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Linux" scheme="https://laplacence.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>curl，强大的调试开发工具。</title>
    <link href="https://laplacence.github.io/2020/09/30/curl_simple_manual/"/>
    <id>https://laplacence.github.io/2020/09/30/curl_simple_manual/</id>
    <published>2020-09-29T16:00:00.000Z</published>
    <updated>2020-09-30T13:05:40.459Z</updated>
    
    <content type="html"><![CDATA[<p>curl，你好强大。<br>curl是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在”标准输出”（stdout）上面。</p><span id="more"></span><h2 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h2><p>直接在curl命令后加上网址，就可以看到网页源码。这里就用我的博客首页来做示范，因为挺短的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl laplacence.github.io</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>加上 -o 保存则是进行保存，同等与wget。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -o &lt;filename&gt; laplacence.github.io</span></span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   162  100   162    0     0   2700      0 --:--:-- --:--:-- --:--:--  2700</span><br></pre></td></tr></table></figure><h2 id="自动跳转"><a href="#自动跳转" class="headerlink" title="自动跳转"></a>自动跳转</h2><p>有的网址是自动跳转的，比如我的首页。使用 -L 参数，curl就会跳转到新的网址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -L laplacence.github.io</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;title&gt;Trash Can&lt;/title&gt;</span><br><span class="line">MORE</span><br></pre></td></tr></table></figure><h2 id="显示header"><a href="#显示header" class="headerlink" title="显示header"></a>显示header</h2><p>-i 可以显示response header的信息，-I 则只显示header。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -i laplacence.github.io</span></span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: GitHub.com</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Location: https://laplacence.github.io/</span><br><span class="line">X-GitHub-Request-Id: 8096:4436:D7CE4:117F57:5F73E5A0</span><br><span class="line">Content-Length: 162</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Date: Wed, 30 Sep 2020 02:08:31 GMT</span><br><span class="line">Via: 1.1 varnish</span><br><span class="line">Age: 766</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Served-By: cache-hkg17933-HKG</span><br><span class="line">X-Cache: HIT</span><br><span class="line">X-Cache-Hits: 1</span><br><span class="line">X-Timer: S1601431711.261853,VS0,VE1</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Fastly-Request-ID: 61661b909bca09baaec268b4e7f0a60b317e424f</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h2><p>-v 可以显示完整的http通信过程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -v laplacence.github.io</span></span><br><span class="line">*   Trying 185.199.109.153:80...</span><br><span class="line">* Connected to laplacence.github.io (185.199.109.153) port 80 (#0)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> GET / HTTP/1.1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Host: laplacence.github.io</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> User-Agent: curl/7.72.0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Accept: */*</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br><span class="line"><span class="bash">* Mark bundle as not supporting multiuse</span></span><br><span class="line">&lt; HTTP/1.1 301 Moved Permanently</span><br><span class="line">&lt; Server: GitHub.com</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Location: https://laplacence.github.io/</span><br><span class="line">&lt; X-GitHub-Request-Id: 8096:4436:D7CE4:117F57:5F73E5A0</span><br><span class="line">&lt; Content-Length: 162</span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt; Date: Wed, 30 Sep 2020 02:28:30 GMT</span><br><span class="line">&lt; Via: 1.1 varnish</span><br><span class="line">&lt; Age: 1965</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; X-Served-By: cache-hkg17926-HKG</span><br><span class="line">&lt; X-Cache: HIT</span><br><span class="line">&lt; X-Cache-Hits: 1</span><br><span class="line">&lt; X-Timer: S1601432910.418005,VS0,VE1</span><br><span class="line">&lt; Vary: Accept-Encoding</span><br><span class="line">&lt; X-Fastly-Request-ID: 0dfc647792c349d178a666c0476557dbcee996d0</span><br><span class="line">&lt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">* Connection #0 to host laplacence.github.io left intact</span><br></pre></td></tr></table></figure><h2 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h2><p>curl默认使用GET，-X 后面可以指定其他方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -X POST laplacence.github.io</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;405 Not Allowed&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;405 Not Allowed&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>假设网页的上传表单如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&#x27;multipart/form-data&#x27;</span> <span class="attr">action</span>=<span class="string">&quot;upload.cgi&quot;</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">name</span>=<span class="string">upload</span>&gt;</span></span><br><span class="line">　　　　<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">name</span>=<span class="string">press</span> <span class="attr">value</span>=<span class="string">&quot;OK&quot;</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>则可以使用这种方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --form upload=@&lt;filename&gt; --form press=OK [URL]</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="UA-header-cookie"><a href="#UA-header-cookie" class="headerlink" title="UA/header/cookie"></a>UA/header/cookie</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --user-agent <span class="string">&quot;UA&quot;</span> [URL]</span></span><br><span class="line">......</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl --cookie <span class="string">&quot;cookie&quot;</span> [URL]</span></span><br><span class="line">......</span><br><span class="line"><span class="meta">$</span><span class="bash"> curl --header <span class="string">&quot;header&quot;</span> [URL]</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;curl，你好强大。&lt;br&gt;curl是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在”标准输出”（stdout）上面。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Linux" scheme="https://laplacence.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>WSL2的配置流程</title>
    <link href="https://laplacence.github.io/2020/09/25/WSL2_usage/"/>
    <id>https://laplacence.github.io/2020/09/25/WSL2_usage/</id>
    <published>2020-09-24T16:00:00.000Z</published>
    <updated>2021-06-06T07:14:25.238Z</updated>
    
    <content type="html"><![CDATA[<p>最好的Linux发行版，WSL。<br>这句话需要加个2了————WSL2。</p><span id="more"></span><h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><p>你一定需要Windows Terminal，如果不使用它，就好比你的咖喱没有放咖喱粉，而只有各类香料。<br>安装只需要在微软商城store内搜索它即可下载。<br>然后你还要确认自己的version是高于1903的版本，否则装不了WSL2。<br>接着，你需要升级WSL2。</p><h2 id="WSL2安装"><a href="#WSL2安装" class="headerlink" title="WSL2安装"></a>WSL2安装</h2><p>安装前，你需要启用WSL。<br>打开admin权限的powershell，输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><p>下载升级<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">内核</a>，<a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">源地址</a>在这。<br>安装完成后，继续用powershell运行。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>最后，去市场安装你需要的发行版，即可享用WSL2。</p><h2 id="WSL2的好处有哪些"><a href="#WSL2的好处有哪些" class="headerlink" title="WSL2的好处有哪些"></a>WSL2的好处有哪些</h2><p>目前来说，最好用的应该是网络文件夹，访问\\wsl$，选择对应的发行版即可访问WSL内所有文件。</p><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="/images/Snipaste_2020-09-25_22-17-15.png" alt="使用了zsh的kali WSL2"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最好的Linux发行版，WSL。&lt;br&gt;这句话需要加个2了————WSL2。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Linux" scheme="https://laplacence.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>dig是什么，怎么用？</title>
    <link href="https://laplacence.github.io/2020/08/31/dig_simple_manual/"/>
    <id>https://laplacence.github.io/2020/08/31/dig_simple_manual/</id>
    <published>2020-08-30T16:00:00.000Z</published>
    <updated>2020-09-30T13:02:00.907Z</updated>
    
    <content type="html"><![CDATA[<p>dig是一个强大而灵活的工具，用于查询DNS服务器。深入了解它的工作原理以及它能告诉你什么。</p><span id="more"></span><p>相信大家对DNS的工作方式都有一定的了解，简而言之就是正确连接到互联网的机器都能通过DNS来查询到正确注册的服务器IP地址。</p><h2 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h2><p>Linux系统上一般都默认安装了dig工具。尝试查询谷歌看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig www.google.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.4-Debian &lt;&lt;&gt;&gt; www.google.com  #dig版本</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 60573</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4000</span><br><span class="line">;; QUESTION SECTION:                          #查询的域名</span><br><span class="line">;www.google.com.                        IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:                            #结果</span><br><span class="line">www.google.com.         124     IN      A       172.217.31.228</span><br><span class="line"></span><br><span class="line">;; Query time: 0 msec             #耗时</span><br><span class="line">;; SERVER: 172.25.193.11#53(172.25.193.11)    #查询的DNS服务器</span><br><span class="line">;; WHEN: Mon Aug 31 09:54:36 CST 2020         #查询时间</span><br><span class="line">;; MSG SIZE  rcvd: 59                         #字节数</span><br></pre></td></tr></table></figure><p>如果你得到了一个这样的应答，是好消息吗？是。你得到了及时的回复。状态字段(status: NOERROR)显示没有问题。你正在连接到一个能够提供所要求的信息的名称服务器，并得到一个回复，告诉你一些关于你所查询域名的重要细节。<br>简而言之，你已经验证了你的系统和DNS服务器相处得很好。<br>其他可能的状态指标包括：</p><ul><li>SERVFAIL：被查询的域名存在，但没有数据或现有数据无效。</li><li>NXDOMAIN：所查询的域名不存在。</li><li>REFUSED：该区域的数据不存在于所请求的权威服务器中，并且在这种情况下，基础设施没有设置为提供响应服务。</li></ul><p>接下来试试一个不存在的域名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig wtfaboutthis.org</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.4-Debian &lt;&lt;&gt;&gt; wtfaboutthis.org</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id: 40814</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4000</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;wtfaboutthis.org.              IN      A</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">org.                    58      IN      SOA     a0.org.afilias-nst.info. noc.afilias-nst.info. 2014067959 1800 900 604800 86400</span><br><span class="line"></span><br><span class="line">;; Query time: 1636 msec</span><br><span class="line">;; SERVER: 172.25.193.11#53(172.25.193.11)</span><br><span class="line">;; WHEN: Mon Aug 31 10:04:48 CST 2020</span><br><span class="line">;; MSG SIZE  rcvd: 108</span><br></pre></td></tr></table></figure><p>如果你使用ping，可能终端只会返回一句Ping request could not find host <a href="http://www.wtfaboutthis.org/">www.wtfaboutthis.org</a>. 使用dig可以比ping获取到的信息更多。比起nslookup也更加详细，nslookup只返回一个状态，且与dig使用的系统库不同，nslookup使用了自己的一套库，某些协会也在呼吁人们停止使用nslookup，因为可能产生意外错误。</p><h2 id="DNS记录类型和标志"><a href="#DNS记录类型和标志" class="headerlink" title="DNS记录类型和标志"></a>DNS记录类型和标志</h2><p>查询Google时，只有一条A记录，其实还有CNAME记录。CNAME(规范名称canonical name)就像一个别名，把一个域名指向另一个域名。你查询的大多数域名不会有CNAME记录，而只有A记录。如果你运行dig localhost命令，你会看到一个A记录，它就指向127.0.0.1。A记录用于将一个名字映射到一个IP地址。<br>DNS记录类型包括：</p><ul><li>A或AAAA：IPv4或IPv6地址</li><li>CNAME：别名</li><li>MX：邮件交换器</li><li>NS：名称服务器</li><li>PTR：一个反向条目，让你根据IP地址找到系统名称</li><li>SOA：表示授权记录开始</li><li>TXT 一些相关文本<br>我们还可以在上述输出的第五行看到一系列的flags。RFC1035中定义了DNS报文头中包含的标志，甚至显示了报文头的格式。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">                                1  1  1  1  1  1</span><br><span class="line">  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="line">|                      ID                       |</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="line">|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="line">|                    QDCOUNT                    |</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="line">|                    ANCOUNT                    |</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="line">|                    NSCOUNT                    |</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br><span class="line">|                    ARCOUNT                    |</span><br><span class="line">+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+</span><br></pre></td></tr></table></figure><p>RFC中描述的标志包括：</p><ul><li>qr = 查询</li><li>rd = 进行递归查询</li><li>ra = 递归数据可用</li><li>aa = 权威答复</li><li>cd = 检查是否禁用</li><li>ad = 真实数据</li><li>opcode = 一个 4 位字段</li><li>tc = 截断</li><li>z（未使用）</li></ul><h2 id="dig进阶使用"><a href="#dig进阶使用" class="headerlink" title="dig进阶使用"></a>dig进阶使用</h2><p>如果你好奇dig命令执行查询时都经历了哪些过程，你可以尝试使用+trace选项。它会输出从根域到最终结果的所有信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig +trace github.io</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.4-Debian &lt;&lt;&gt;&gt; +trace github.io</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.                       6595    IN      NS      f.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      i.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      b.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      l.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      c.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      j.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      d.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      e.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      h.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      g.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      m.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      k.root-servers.net.</span><br><span class="line">.                       6595    IN      NS      a.root-servers.net.</span><br><span class="line">;; Received 824 bytes from 172.25.193.11#53(172.25.193.11) in 0 ms</span><br><span class="line"></span><br><span class="line">github.io.              3247    IN      A       185.199.108.153</span><br><span class="line">github.io.              3247    IN      A       185.199.109.153</span><br><span class="line">github.io.              3247    IN      A       185.199.110.153</span><br><span class="line">github.io.              3247    IN      A       185.199.111.153</span><br><span class="line">;; Received 102 bytes from 198.97.190.53#53(h.root-servers.net) in 37 ms</span><br></pre></td></tr></table></figure><p>使用@符号指定服务器查询，这里我们使用经典4个8。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig @8.8.8.8 github.io</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.4-Debian &lt;&lt;&gt;&gt; @8.8.8.8 github.io</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 42235</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 512</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;github.io.                     IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">github.io.              3470    IN      A       185.199.108.153</span><br><span class="line">github.io.              3470    IN      A       185.199.109.153</span><br><span class="line">github.io.              3470    IN      A       185.199.110.153</span><br><span class="line">github.io.              3470    IN      A       185.199.111.153</span><br><span class="line"></span><br><span class="line">;; Query time: 27 msec</span><br><span class="line">;; SERVER: 8.8.8.8#53(8.8.8.8)</span><br><span class="line">;; WHEN: Mon Aug 31 10:37:10 CST 2020</span><br><span class="line">;; MSG SIZE  rcvd: 102</span><br></pre></td></tr></table></figure><p>接着使用-x参数，查看8.8.8.8的CNAME。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig -x 8.8.8.8</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.16.4-Debian &lt;&lt;&gt;&gt; -x 8.8.8.8</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 24658</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4000</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;8.8.8.8.in-addr.arpa.          IN      PTR</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">8.8.8.8.in-addr.arpa.   82326   IN      PTR     dns.google.</span><br><span class="line"></span><br><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 172.25.193.11#53(172.25.193.11)</span><br><span class="line">;; WHEN: Mon Aug 31 10:43:51 CST 2020</span><br><span class="line">;; MSG SIZE  rcvd: 73</span><br></pre></td></tr></table></figure><p>在上面的结果中，IN前面的数字是TTL，DNS解析中相对重要的指标之一，表示了DNS记录在DNS服务器上的缓存时间。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;dig是一个强大而灵活的工具，用于查询DNS服务器。深入了解它的工作原理以及它能告诉你什么。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Linux" scheme="https://laplacence.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Python3的垃圾回收机制</title>
    <link href="https://laplacence.github.io/2020/08/12/Python_GC/"/>
    <id>https://laplacence.github.io/2020/08/12/Python_GC/</id>
    <published>2020-08-11T16:00:00.000Z</published>
    <updated>2020-09-30T13:09:08.356Z</updated>
    
    <content type="html"><![CDATA[<p>这个大概是经常说的机制。</p><span id="more"></span><h2 id="引用计数机制"><a href="#引用计数机制" class="headerlink" title="引用计数机制"></a>引用计数机制</h2><p>Python默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早由George E. Collins在1960的时候首次提出，直到今天，该算法依然被很多编程语言使用。<br>『引用计数法』的原理是：每个对象维护一个ob_ref字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数ob_ref加1，每当该对象的引用失效时计数ob_ref减1，一旦对象的引用计数为0，该对象立即被回收，对象占用的内存空间将被释放。<br>它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如Java并没有采用该算法做来垃圾的收集机制。<br>接下来我们看个例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># init</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;object id:%s&#x27;</span> % <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">id</span>(self))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1 = A()</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">c</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;obejct refcount is:&#x27;</span>, sys.getrefcount(c))  <span class="comment"># getrefcount()方法用于返回对象的引用计数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># create object</span></span><br><span class="line">    a = A()</span><br><span class="line">    func(a)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add reference b</span></span><br><span class="line">    b = a</span><br><span class="line">    func(a)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># destruct b</span></span><br><span class="line">    <span class="keyword">del</span> b</span><br><span class="line">    func(a)</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15a685eaf40</span></span><br><span class="line">obejct refcount <span class="keyword">is</span>: <span class="number">4</span></span><br><span class="line">obejct refcount <span class="keyword">is</span>: <span class="number">5</span></span><br><span class="line">obejct refcount <span class="keyword">is</span>: <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="导致引用计数-1的情况"><a href="#导致引用计数-1的情况" class="headerlink" title="导致引用计数+1的情况"></a>导致引用计数+1的情况</h3><ul><li>对象被创建，例如a=23</li><li>对象被引用，例如b=a</li><li>对象被作为参数，传入到一个函数中，例如func(a)</li><li>对象作为一个元素，存储在容器中，例如list1=[a,a]</li></ul><h3 id="导致引用计数-1的情况-1"><a href="#导致引用计数-1的情况-1" class="headerlink" title="导致引用计数-1的情况"></a>导致引用计数-1的情况</h3><ul><li>对象的别名被显式销毁，例如del a</li><li>对象的别名被赋予新的对象，例如a=24</li><li>一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）</li><li>对象所在的容器被销毁，或从容器中删除对象</li></ul><h3 id="内存泄漏样例"><a href="#内存泄漏样例" class="headerlink" title="内存泄漏样例"></a>内存泄漏样例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1 = A()</span><br><span class="line">        c2 = A()</span><br><span class="line">        c1.t = c2</span><br><span class="line">        c2.t = c1</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line">        <span class="keyword">del</span> c2</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca7610</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca65b0</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca6550</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca6370</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca6490</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca6430</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca66a0</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca6940</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca6eb0</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca6b50</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca6610</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x15ad4ca6220</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>创建c1、c2后，计数均为1，执行引用后都变成2，del执行后计数器都降为1，不为0的情况则导致c1、c2不会被销毁。加上while循环，结果就导致无限创建新的对象，新的对象又产生引用，统统无法收回的结果就是内存泄漏。</p><h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><p>分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为0、1、2代，他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。<br>新创建的对象都会分配在0代，0代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到1代去，依此类推，2代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。<br>同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象。</p><h2 id="gc模块垃圾回收"><a href="#gc模块垃圾回收" class="headerlink" title="gc模块垃圾回收"></a>gc模块垃圾回收</h2><p>有三种情况会触发gc模块垃圾回收：</p><ul><li>调用gc.collect()。</li><li>当gc模块的计数器达到阀值的时候。</li><li>程序退出的时候。</li></ul><p>gc模块提供一个接口给开发者设置垃圾回收的选项。上面说到，采用引用计数的方法管理内存的一个缺陷是循环引用，而gc模块的一个主要功能就是解决循环引用的问题。<br>下面是一些常用的函数。</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>gc.enable()</td><td>开启自动垃圾收集</td></tr><tr><td>gc.disable()</td><td>禁用自动垃圾收集</td></tr><tr><td>gc.isenabled()</td><td>如果启用则返回true</td></tr><tr><td>gc.set_debug(flags)</td><td>设置gc的debug日志，一般设置为gc.DEBUG_LEAK</td></tr><tr><td>gc.collect([generation])</td><td>显式进行垃圾回收，可以输入参数，0代表只检查0代的对象，1代表检查0、1代的对象，2代表检查所有代的对象。如果不传参数，则默认传入2。返回不可达（unreachable objects）对象的数目。</td></tr><tr><td>gc.set_threshold(threshold0[, threshold1[, threshold2])</td><td>设置自动执行垃圾回收的频率。</td></tr><tr><td>gc.get_count()</td><td>获取当前自动执行垃圾回收的计数器，返回返回当前集合计数为元组(count0, count1, count2)。</td></tr></tbody></table><p>其他函数可以在官方文档内查看，接下来我们使用看看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>():</span></span><br><span class="line">    gc.enable()</span><br><span class="line">    gc.set_debug(gc.DEBUG_LEAK)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c1 = A()</span><br><span class="line">        c2 = A()</span><br><span class="line">        c1.t = c2</span><br><span class="line">        c2.t = c1</span><br><span class="line">        <span class="keyword">del</span> c1</span><br><span class="line">        <span class="keyword">del</span> c2</span><br><span class="line">        <span class="comment"># import gc</span></span><br><span class="line">        <span class="built_in">print</span>(gc.garbage)</span><br><span class="line">        <span class="built_in">print</span>(gc.collect())</span><br><span class="line">        <span class="built_in">print</span>(gc.garbage)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gc: collectable &lt;A <span class="number">0x00000222A733AF40</span>&gt;</span><br><span class="line">gc: collectable &lt;A <span class="number">0x00000222A733AB50</span>&gt;</span><br><span class="line">gc: collectable &lt;<span class="built_in">dict</span> <span class="number">0x00000222A72FFC00</span>&gt;</span><br><span class="line">gc: collectable &lt;<span class="built_in">dict</span> <span class="number">0x00000222A730F340</span>&gt;</span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x222a733af40</span></span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x222a733ab50</span></span><br><span class="line">[]</span><br><span class="line"><span class="number">4</span></span><br><span class="line">[&lt;__main__.A <span class="built_in">object</span> at <span class="number">0x00000222A733AF40</span>&gt;, &lt;__main__.A <span class="built_in">object</span> at <span class="number">0x00000222A733AB50</span>&gt;, &#123;<span class="string">&#x27;t&#x27;</span>: &lt;__main__.A <span class="built_in">object</span> at <span class="number">0x00000222A733AB50</span>&gt;&#125;, &#123;<span class="string">&#x27;t&#x27;</span>: &lt;__main__.A <span class="built_in">object</span> at <span class="number">0x00000222A733AF40</span>&gt;&#125;]</span><br></pre></td></tr></table></figure><p>可以看到gc很快就捕捉到两个A和c1、c2，并判定为可回收的，执行回收之后，garbage列表内多了4个对象。<br>gc本身采用了分代收集的方法，把对象分为3代，一开始，对象在创建的时候，放在0代中，如果在一次0代的垃圾检查中，该对象存活下来，就会被放到1代中，同理在一次1代的垃圾检查中，该对象存活下来，就会被放到2代中。</p><p>用例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f4</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(gc.get_count())</span><br><span class="line">    a = A()</span><br><span class="line">    <span class="built_in">print</span>(gc.get_count())</span><br><span class="line">    <span class="keyword">del</span> a</span><br><span class="line">    <span class="built_in">print</span>(gc.get_count())</span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">427</span>, <span class="number">9</span>, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">object</span> <span class="built_in">id</span>:<span class="number">0x13fba46af40</span></span><br><span class="line">(<span class="number">428</span>, <span class="number">9</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="number">427</span>, <span class="number">9</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>427指距离上一次0代垃圾检查，Python分配内存的数目减去释放内存的数目。<br>9指距离上一次0、1代垃圾检查的次数。<br>0是指距离上一次0、1、2代垃圾检查的次数。<br>配合阈值来看，一般默认阈值为(700, 10, 10)，如果当其中任何一个数字达到阈值，则会对应代的执行垃圾回收，即gc.collect([generation])，并将计数器清零。</p><ul><li>当计数器从(699, 3, 0)增加到(700, 3, 0)，gc模块就会执行gc.collect(0),并重置计数器为(0, 4, 0)</li><li>当计数器从(699, 9, 0)增加到(700, 9, 0)，gc模块就会执行gc.collect(1),并重置计数器为(0, 0, 1)</li><li>当计数器从(699, 9 ,9)增加到(700, 9, 9)，gc模块就会执行gc.collect(2),并重置计数器为(0, 0, 0)</li></ul><h2 id="标记-清除回收"><a href="#标记-清除回收" class="headerlink" title="标记-清除回收"></a>标记-清除回收</h2><p>所谓标记-清除，就是先标记，再清除。标记的是活动对象，清除的是非活动对象。<br>首先，为了追踪容器对象的引用情况，每个容器对象需要维护两个额外的指针，指针分别指向前后两个容器对象，所有容器对象便组成了一个双向链表，或者，我们也可以将其视为一个有向图。其中，容器对象是有向图的节点，而引用关系是有向图的边。从根对象(root objects)出发，沿着有向边遍历对象，可达的(reachable)对象标记为活动对象，不可达的对象(unreachable objects)就是要被清除的非活动对象。<br>标记-清除作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个大概是经常说的机制。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Python" scheme="https://laplacence.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python3打包成windows的exe可执行程序</title>
    <link href="https://laplacence.github.io/2020/06/16/Python_to_exe/"/>
    <id>https://laplacence.github.io/2020/06/16/Python_to_exe/</id>
    <published>2020-06-15T16:00:00.000Z</published>
    <updated>2020-09-30T13:09:41.049Z</updated>
    
    <content type="html"><![CDATA[<p>首先，Python打包成exe就是个大坑。</p><span id="more"></span><p>最近在做一些小程序，想着分享给一些朋友用用，就想到了打包程序。结果不看不知道，一看原来这东西是个深渊。<br>使用的是Pyinstaller 3.6/Python 3.8.3环境进行的编译打包。<br>新版本的Pyinstaller虽然支持了Python3，但是依旧有遗留下来的问题。打包后程序运行后会提示未找到模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;pkg_resources.py2_warn&#x27;</span></span><br></pre></td></tr></table></figure><p>这个模块照着pkg_resources源码一搜发现，在它的<code>__init__.py</code>里面import了这个模块，而且这个模块本身的内容就是一个逻辑判断，看你是不是使用了Python2，如果是就报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> textwrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msg = textwrap.dedent(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Encountered a version of Setuptools that no longer supports</span></span><br><span class="line"><span class="string">    this version of Python. Please head to</span></span><br><span class="line"><span class="string">    https://bit.ly/setuptools-py2-sunset for support.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">pre = <span class="string">&quot;Setuptools no longer works on Python 2\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.version_info &lt; (<span class="number">3</span>,):</span><br><span class="line">    warnings.warn(pre + <span class="string">&quot;*&quot;</span> * <span class="number">60</span> + msg + <span class="string">&quot;*&quot;</span> * <span class="number">60</span>)</span><br><span class="line">    <span class="keyword">raise</span> SystemExit(<span class="number">32</span>)</span><br></pre></td></tr></table></figure><p>不知道是哪里的咖喱代码导致这个模块无法导入，总之其中一个解决方法就是直接在<code>__init__.py</code>里面注释掉py2_warn这个import。<br>另一个方法是在打包的根目录中找到.spec，里面的hiddenimports加上’pkg_resources.py2_warn’，即手动import模块，之后再对.spec进行打包操作即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;首先，Python打包成exe就是个大坑。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Python" scheme="https://laplacence.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>关于Fedora的一些配置（长期更新）</title>
    <link href="https://laplacence.github.io/2020/05/21/Fedora_options/"/>
    <id>https://laplacence.github.io/2020/05/21/Fedora_options/</id>
    <published>2020-05-20T16:00:00.000Z</published>
    <updated>2020-09-30T13:03:37.098Z</updated>
    
    <content type="html"><![CDATA[<p>之所以写这个博客是因为经常自己Fedora重装（都是Windows的锅），写来备忘以下，下次安装可以直接看这个，顺便跟大家分享下自己的配置。<br>最近更新日期2020-05-21，版本为Fedora 32。</p><span id="more"></span><p><strong>Fedora 28 重大更新，使用GNOME3后，开发团队移除了桌面图标的相关代码。</strong></p><h2 id="桌面主题工具-我比较喜欢的主题和图标-文件夹右键打开终端"><a href="#桌面主题工具-我比较喜欢的主题和图标-文件夹右键打开终端" class="headerlink" title="桌面主题工具/我比较喜欢的主题和图标/文件夹右键打开终端"></a>桌面主题工具/我比较喜欢的主题和图标/文件夹右键打开终端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> dnf install gnome-tweak-tool arc-theme numix-icon-theme-circle nautilus-open-terminal -y</span></span><br></pre></td></tr></table></figure><p>之后在开始可以找到tweaks的图标，里面有详细设置。<br>各种插件可以去gnome的插件官网下载chrome的管理器后下载安装各类插件。</p><h2 id="设置快捷键打开终端"><a href="#设置快捷键打开终端" class="headerlink" title="设置快捷键打开终端"></a>设置快捷键打开终端</h2><p>找到设置里面的keyboard，添加快捷键，名字随意，command用gnome-terminal。</p><h2 id="vim编辑器大全"><a href="#vim编辑器大全" class="headerlink" title="vim编辑器大全"></a>vim编辑器大全</h2><p>配置文件 ~/.vimrc 里面写入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&quot;basic&quot;</span><br><span class="line">set history=10000</span><br><span class="line">filetype off</span><br><span class="line">filetype indent on</span><br><span class="line">filetype plugin on</span><br><span class="line">filetype plugin indent on</span><br><span class="line">set backspace=eol,start,indent</span><br><span class="line">set nocompatible</span><br><span class="line">set autoread</span><br><span class="line">set shortmess=atI</span><br><span class="line">set nobackup</span><br><span class="line">set noswapfile</span><br><span class="line">set paste</span><br><span class="line">set mouse-=a</span><br><span class="line">set selection=exclusive</span><br><span class="line">set selectmode=mouse,key</span><br><span class="line">set noerrorbells</span><br><span class="line">set novisualbell</span><br><span class="line">set t_vb=</span><br><span class="line">set tm=500</span><br><span class="line"></span><br><span class="line">&quot;show and format&quot;</span><br><span class="line">set number</span><br><span class="line">set nowrap</span><br><span class="line">nmap &lt;F2&gt; :set nonumber!&lt;CR&gt;</span><br><span class="line">set pastetoggle=&lt;F11&gt;</span><br><span class="line">set showmatch</span><br><span class="line">set mat=2</span><br><span class="line">set nohlsearch</span><br><span class="line">set ignorecase</span><br><span class="line">set incsearch</span><br><span class="line">set smartcase</span><br><span class="line">set tabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line">set expandtab</span><br><span class="line">set softtabstop=4</span><br><span class="line">set autoindent</span><br><span class="line">set cindent</span><br><span class="line">set smartindent</span><br><span class="line"></span><br><span class="line">&quot;status&quot;</span><br><span class="line">set ruler</span><br><span class="line">set showcmd</span><br><span class="line">set so=7</span><br><span class="line"></span><br><span class="line">&quot;color and fonts&quot;</span><br><span class="line">syntax enable</span><br><span class="line">syntax on</span><br><span class="line">set t_Co=256</span><br><span class="line"></span><br><span class="line">&quot;file encode&quot;</span><br><span class="line">set encoding=utf-8</span><br><span class="line">set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1</span><br><span class="line">set ffs=unix,dos,mac</span><br><span class="line">set formatoptions+=m</span><br><span class="line">set formatoptions+=B</span><br><span class="line"></span><br><span class="line">&quot;others&quot;</span><br><span class="line">autocmd! bufwritepost .vimrc source %</span><br><span class="line">set wildmenu</span><br><span class="line">set wildignore=*.o,*~,*.pyc</span><br></pre></td></tr></table></figure><h2 id="安装Visual-Studio-Code-弃用emacs"><a href="#安装Visual-Studio-Code-弃用emacs" class="headerlink" title="安装Visual Studio Code(弃用emacs)"></a>安装Visual Studio Code(弃用emacs)</h2><p>官网下载对应的rpm包，双击文件/命令行安装完后所有程序即出现VSC。<br>到MarketPlace下载官方的Python拓展，内置了格式化/自动补全等功能，可在File-&gt;Preference-&gt;Settings内搜索到相应设置。<br>格式化快捷键：Ctrl+Shift+I</p><p>C++配置与Windows下一致，同样下载官方的C/C++拓展，生成.vscode文件夹，配置launch.json/task.json。<br>需要另外安装gcc-c++，Fedora并没有自带。</p><h2 id="dnf-repo修改源"><a href="#dnf-repo修改源" class="headerlink" title="dnf repo修改源"></a>dnf repo修改源</h2><p>只需要更改/etc/dnf/dnf.conf里面的内容即可，在里面多加上一句。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastestmirror=true</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;之所以写这个博客是因为经常自己Fedora重装（都是Windows的锅），写来备忘以下，下次安装可以直接看这个，顺便跟大家分享下自己的配置。&lt;br&gt;最近更新日期2020-05-21，版本为Fedora 32。&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Fedora" scheme="https://laplacence.github.io/categories/Fedora/"/>
    
    
  </entry>
  
  <entry>
    <title>selenium关于chromedriver的配置</title>
    <link href="https://laplacence.github.io/2020/05/21/selenium_about_chromedriver/"/>
    <id>https://laplacence.github.io/2020/05/21/selenium_about_chromedriver/</id>
    <published>2020-05-20T16:00:00.000Z</published>
    <updated>2020-09-30T13:10:04.425Z</updated>
    
    <content type="html"><![CDATA[<p>selenium也算是一个比较低智常用的爬虫，可以使用Firefox/Chrome/IE。</p><span id="more"></span><p>以下是在Fedora 32碰到的问题。<br>目前Fedora 32已经内置了Python3.8，所以只需通过pip安装selenium即可。<br>chromedriver放入PATH中，或者在代码中指定配置路径。</p><p>chromedriver的版本要与已安装的chrome/chromium一致，否则会导致错误，如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 81</span><br></pre></td></tr></table></figure><p>还有一种错误也是经常见到的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unknown error: DevToolsActivePort file doesn&#x27;t exist</span><br></pre></td></tr></table></figure><p>这时候要在options内添加一些参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options = ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">&quot;--disable-dev-shm-usage&quot;</span>)</span><br><span class="line">options.add_argument(<span class="string">&quot;--no-sandbox&quot;</span>)</span><br><span class="line">driver = Chrome(options=options)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;selenium也算是一个比较低智常用的爬虫，可以使用Firefox/Chrome/IE。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://laplacence.github.io/categories/Linux/"/>
    
    <category term="Python" scheme="https://laplacence.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>4连通种子填充算法</title>
    <link href="https://laplacence.github.io/2020/04/06/seed_fill_4/"/>
    <id>https://laplacence.github.io/2020/04/06/seed_fill_4/</id>
    <published>2020-04-05T16:00:00.000Z</published>
    <updated>2020-04-11T07:10:42.798Z</updated>
    
    <content type="html"><![CDATA[<p>使用了第三方图形库EGEv19.01，C++编写。</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入直线的两端点P0(x0,y0) 和 P1(x1,y1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Midpoint_Line</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, d1, d2, d, x, y;</span><br><span class="line">    <span class="keyword">float</span> k;</span><br><span class="line">    <span class="keyword">if</span> (x1 &lt; x0) &#123;</span><br><span class="line">        <span class="comment">//置反操作,使得输出结果平面左右水平翻转,防止画反线段</span></span><br><span class="line">        d = x0, x0 = x1, x1 = d;</span><br><span class="line">        d = y0, y0 = y1, y1 = d;</span><br><span class="line">    &#125;</span><br><span class="line">    a = y0 - y1, b = x1 - x0;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//b==0,a&lt;0(k-&gt;inf)则放入k&gt;1,a&gt;0(k-&gt;-inf)则放入k&lt;-1</span></span><br><span class="line">        <span class="comment">//因为C++除法操作除数为零时候可能会出现undefined的结果</span></span><br><span class="line">        k = <span class="number">-1</span> * a * <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        k = (<span class="keyword">float</span>)a / (x0 - x1);</span><br><span class="line">    x = x0, y = y0;</span><br><span class="line">    <span class="built_in">putpixel</span>(x, y, RED);</span><br><span class="line">    <span class="comment">// 0&lt;=k&lt;=1</span></span><br><span class="line">    <span class="comment">// 1.计算初始值，a=y0−y1， b=x1−x0， D=2a+b</span></span><br><span class="line">    <span class="comment">// 2.x=x0，y=y0</span></span><br><span class="line">    <span class="comment">// 3.绘制点(x，y)，判断D的符号</span></span><br><span class="line">    <span class="comment">// 若D&lt;=0，则(x，y)更新为(x+1，y+1)，D更新为D=D+2a+2b</span></span><br><span class="line">    <span class="comment">// 否则(x，y)更新为(x+1，y)， D更新为D=D+2a</span></span><br><span class="line">    <span class="comment">// 4.当直线没有画完时，重复步骤3，否则结束</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt;= <span class="number">0</span> &amp;&amp; k &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        d = <span class="number">2</span> * a + b;</span><br><span class="line">        d1 = <span class="number">2</span> * a, d2 = <span class="number">2</span> * (a + b);</span><br><span class="line">        <span class="keyword">while</span> (x &lt; x1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                ++x, ++y, d += d2;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++x, d += d1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putpixel</span>(x, y, RED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -1&lt;=k&lt;=0</span></span><br><span class="line">    <span class="comment">// 1.计算初始值，a=y0−y1， b=x1−x0， D=2a-b</span></span><br><span class="line">    <span class="comment">// 因为当-1&lt;=k&lt;=0时，b为负数，所以要2a-b</span></span><br><span class="line">    <span class="comment">// 2.x=x0，y=y0</span></span><br><span class="line">    <span class="comment">// 3.绘制点(x，y)，判断D的符号</span></span><br><span class="line">    <span class="comment">// 若D&gt;0，则(x，y)更新为(x+1，y-1)，D更新为D=D+2a-2b</span></span><br><span class="line">    <span class="comment">// 因为当-1&lt;=k&lt;=0时，x越大，y越小</span></span><br><span class="line">    <span class="comment">// 否则(x，y)更新为(x+1，y)， D更新为D=D+2a</span></span><br><span class="line">    <span class="comment">// 4.当直线没有画完时，重复步骤3，否则结束</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt;= <span class="number">0</span> &amp;&amp; k &gt;= <span class="number">-1</span>) &#123;</span><br><span class="line">        d = <span class="number">2</span> * a - b;</span><br><span class="line">        d1 = <span class="number">2</span> * a - <span class="number">2</span> * b, d2 = <span class="number">2</span> * a;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; x1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ++x, --y, d += d1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++x, d += d2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putpixel</span>(x, y, RED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// k&gt;1</span></span><br><span class="line">    <span class="comment">// 1.计算初始值  a=y0−y1， b=x1−x0， D=2a+b</span></span><br><span class="line">    <span class="comment">// 2.x=x0，y=y0</span></span><br><span class="line">    <span class="comment">// 3.绘制点(x，y)，判断D的符号</span></span><br><span class="line">    <span class="comment">// 若D&gt;0，则(x，y)更新为(x+1，y+1)，D更新为D=D+2a+2b</span></span><br><span class="line">    <span class="comment">// 否则(x，y)更新为(y+1，y)， D更新为D=D+2b</span></span><br><span class="line">    <span class="comment">// 因为当k&gt;1时，y为步进方向。</span></span><br><span class="line">    <span class="comment">// 4.当直线没有画完时，重复步骤3，否则结束</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        d = a + <span class="number">2</span> * b;</span><br><span class="line">        d1 = <span class="number">2</span> * (a + b), d2 = <span class="number">2</span> * b;</span><br><span class="line">        <span class="keyword">while</span> (y &lt; y1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ++x, ++y, d += d1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++y, d += d2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putpixel</span>(x, y, RED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// k&lt;-1</span></span><br><span class="line">    <span class="comment">// 1.计算初始值  a=y0−y1， b=x1−x0， D=2a-b</span></span><br><span class="line">    <span class="comment">// 2.x=x0，y=y0</span></span><br><span class="line">    <span class="comment">// 3.绘制点(x，y)，判断D的符号</span></span><br><span class="line">    <span class="comment">// 若D&lt;=0，则(x，y)更新为(x+1，y-1)，D更新为D=D-2a-2b</span></span><br><span class="line">    <span class="comment">// 因为当k&lt;-1时，a，b均为负数，所以要D=D-2a-2b</span></span><br><span class="line">    <span class="comment">// 因为当k&lt;-1时，x越大，y越小</span></span><br><span class="line">    <span class="comment">// 否则(x，y)更新为(y-1，y)， D更新为D=D-2b</span></span><br><span class="line">    <span class="comment">// 因为当k&lt;-1时，y为步进方向，且x越大y越小，即y-1</span></span><br><span class="line">    <span class="comment">// 4.当直线没有画完时，重复步骤3，否则结束</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        d = a - <span class="number">2</span> * b;</span><br><span class="line">        d1 = <span class="number">-2</span> * b, d2 = <span class="number">2</span> * a - <span class="number">2</span> * b;</span><br><span class="line">        <span class="keyword">while</span> (y &gt; y1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                ++x, --y, d += d2;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --y, d += d1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putpixel</span>(x, y, RED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面为中点画线法</span></span><br><span class="line"><span class="comment">// 这里开始为种子填充算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SeedFillTC4</span><span class="params">(<span class="keyword">int</span> seedx, <span class="keyword">int</span> seedy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> current = <span class="built_in">getpixel</span>(seedx, seedy);</span><br><span class="line">    <span class="keyword">if</span> ((current != <span class="number">11010048</span>) &amp;&amp; (current != <span class="number">43008</span>)) &#123;</span><br><span class="line">        <span class="built_in">putpixel</span>(seedx, seedy, GREEN);</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">SeedFillTC4</span>(seedx + <span class="number">1</span>, seedy); <span class="comment">//右</span></span><br><span class="line">        <span class="built_in">SeedFillTC4</span>(seedx - <span class="number">1</span>, seedy); <span class="comment">//左</span></span><br><span class="line">        <span class="built_in">SeedFillTC4</span>(seedx, seedy + <span class="number">1</span>); <span class="comment">//上</span></span><br><span class="line">        <span class="built_in">SeedFillTC4</span>(seedx, seedy - <span class="number">1</span>); <span class="comment">//下</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">initgraph</span>(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">    <span class="built_in">setbkcolor</span>(WHITE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">20</span>, <span class="number">40</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">20</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">60</span>);</span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">80</span>, <span class="number">60</span>, <span class="number">120</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">120</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">80</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SeedFillTC4</span>(<span class="number">60</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getch</span>();</span><br><span class="line">    <span class="built_in">closegraph</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用了第三方图形库EGEv19.01，C++编写。&lt;/p&gt;</summary>
    
    
    
    <category term="CPP" scheme="https://laplacence.github.io/categories/CPP/"/>
    
    <category term="algorithm" scheme="https://laplacence.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Python3的书写技巧和应用</title>
    <link href="https://laplacence.github.io/2020/03/26/Technique_of_Python/"/>
    <id>https://laplacence.github.io/2020/03/26/Technique_of_Python/</id>
    <published>2020-03-25T16:00:00.000Z</published>
    <updated>2021-08-29T07:34:52.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="地道的循环"><a href="#地道的循环" class="headerlink" title="地道的循环"></a>地道的循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">    <span class="built_in">print</span>(i, name)</span><br></pre></td></tr></table></figure><h2 id="直接交换2个数字的位置"><a href="#直接交换2个数字的位置" class="headerlink" title="直接交换2个数字的位置"></a>直接交换2个数字的位置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, y = y, x</span><br><span class="line"><span class="built_in">print</span>(x, y)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="链接比较操作符"><a href="#链接比较操作符" class="headerlink" title="链接比较操作符"></a>链接比较操作符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">10</span></span><br><span class="line">result = <span class="number">1</span> &lt; n &lt; <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">result = <span class="number">11</span> &gt; n &lt; <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="使用三元操作符进行条件赋值"><a href="#使用三元操作符进行条件赋值" class="headerlink" title="使用三元操作符进行条件赋值"></a>使用三元操作符进行条件赋值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三元操作符是 if-else 语句（也就是条件操作符）的快捷操作</span></span><br><span class="line"><span class="comment">#[on_true] if [expression] else [on_false]</span></span><br><span class="line">x = <span class="number">10</span> <span class="keyword">if</span> (y == <span class="number">9</span>) <span class="keyword">else</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#同样，我们对类对象也可以这样操作：</span></span><br><span class="line">x = (classA <span class="keyword">if</span> y == <span class="number">1</span> <span class="keyword">else</span> classB)(param1, param2)</span><br></pre></td></tr></table></figure><h2 id="将一个列表的元素保存到新变量中"><a href="#将一个列表的元素保存到新变量中" class="headerlink" title="将一个列表的元素保存到新变量中"></a>将一个列表的元素保存到新变量中</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">x, y, z = testList</span><br><span class="line"><span class="built_in">print</span>(x, y, z)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="打印出导入的模块的文件路径"><a href="#打印出导入的模块的文件路径" class="headerlink" title="打印出导入的模块的文件路径"></a>打印出导入的模块的文件路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="built_in">print</span>(threading)</span><br><span class="line"><span class="built_in">print</span>(socket)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;module <span class="string">&#x27;threading&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python3.7/threading.py&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;module <span class="string">&#x27;socket&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python3.7/socket.py&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="使用交互式“-”操作符"><a href="#使用交互式“-”操作符" class="headerlink" title="使用交互式“_”操作符"></a>使用交互式“_”操作符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在 Python3 控制台中，每当我们测试一个表达式或调用一个函数时，结果都会分配一个临时名称，_（一条下划线）</span></span><br><span class="line"><span class="comment">#这里的&quot;_&quot;是上一个执行的表达式的结果。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> + <span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(_)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="字典-集合推导"><a href="#字典-集合推导" class="headerlink" title="字典/集合推导"></a>字典/集合推导</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">testDict = &#123;i: i * i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line">testSet = &#123;i * <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(testDict)</span><br><span class="line"><span class="built_in">print</span>(testSet)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">9</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">5</span>: <span class="number">25</span>, <span class="number">6</span>: <span class="number">36</span>, <span class="number">7</span>: <span class="number">49</span>, <span class="number">8</span>: <span class="number">64</span>, <span class="number">9</span>: <span class="number">81</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="调试脚本"><a href="#调试脚本" class="headerlink" title="调试脚本"></a>调试脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&lt;pdb&gt; 模块在 Python3 脚本中设置断点</span></span><br><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line">pdb.set_trace()</span><br></pre></td></tr></table></figure><h2 id="设置文件分享"><a href="#设置文件分享" class="headerlink" title="设置文件分享"></a>设置文件分享</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启用http服务器并设置端口为8000</span></span><br><span class="line">$ python -m http.server <span class="number">8000</span></span><br></pre></td></tr></table></figure><h2 id="在Python中检查对象"><a href="#在Python中检查对象" class="headerlink" title="在Python中检查对象"></a>在Python中检查对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我们可以通过调用 dir() 方法在 Python 中检查对象</span></span><br><span class="line">test = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">dir</span>(test) )</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;__add__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__contains__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__delitem__&#x27;</span>, <span class="string">&#x27;__delslice__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>,<span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getitem__&#x27;</span>, <span class="string">&#x27;__getslice__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__iadd__&#x27;</span>, <span class="string">&#x27;__imul__&#x27;</span>,<span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__len__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__mul__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>,<span class="string">&#x27;__reversed__&#x27;</span>, <span class="string">&#x27;__rmul__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__setitem__&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;__setslice__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>,<span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;append&#x27;</span>, <span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;extend&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;remove&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="简化if语句"><a href="#简化if语句" class="headerlink" title="简化if语句"></a>简化if语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#验证多个值</span></span><br><span class="line"><span class="keyword">if</span> m <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]:</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以用字符串</span></span><br><span class="line"><span class="keyword">if</span> m <span class="keyword">in</span> <span class="string">&#x27;&#123;1,3,5,7&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="在运行时检测Python的版本"><a href="#在运行时检测Python的版本" class="headerlink" title="在运行时检测Python的版本"></a>在运行时检测Python的版本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> sys.version_info &gt;= (<span class="number">3</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sorry, you aren&#x27;t running on Python 3.5 or late\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please upgrade to 3.5 or late.\n&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="组合多个字符串"><a href="#组合多个字符串" class="headerlink" title="组合多个字符串"></a>组合多个字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;Like&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;automation&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(test))</span><br></pre></td></tr></table></figure><h2 id="翻转字符串-列表的3种方式"><a href="#翻转字符串-列表的3种方式" class="headerlink" title="翻转字符串/列表的3种方式"></a>翻转字符串/列表的3种方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">testList = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">testList.reverse()</span><br><span class="line"><span class="built_in">print</span>(testList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#在循环中迭代时翻转</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> <span class="built_in">reversed</span>([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]):</span><br><span class="line">    <span class="built_in">print</span>(element)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用切片翻转一个列表</span></span><br><span class="line"><span class="string">&quot;Test Python&quot;</span>[::-<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;nohtyP tseT&#x27;</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>][::-<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a>使用枚举</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用枚举可以很容易地在循环中找到索引</span></span><br><span class="line">testlist = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(testlist):</span><br><span class="line">    <span class="built_in">print</span>(i, <span class="string">&#x27;:&#x27;</span>, value)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> : <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> : <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> : <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在 Python3 中使用枚举量</span></span><br><span class="line"><span class="comment">#我们可以用如下方法来创建枚举定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shapes</span>:</span></span><br><span class="line">    Circle, Square, Triangle, Quadrangle = <span class="built_in">range</span>(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(Shapes.Circle)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(Shapes.Square)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(Shapes.Triangle)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(Shapes.Quadrangle)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="从函数中返回多个值"><a href="#从函数中返回多个值" class="headerlink" title="从函数中返回多个值"></a>从函数中返回多个值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">a, b, c, d = x()</span><br><span class="line"><span class="built_in">print</span>(a, b, c, d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="使用-运算符解压缩函数参数"><a href="#使用-运算符解压缩函数参数" class="headerlink" title="使用*运算符解压缩函数参数"></a>使用*运算符解压缩函数参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">x, y, z</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(x, y, z)</span><br><span class="line">testDict = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;z&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">testList = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">test(*testDict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x y z</span><br><span class="line">test(**testDict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">test(*testList)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> <span class="number">20</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="使用字典来存储表达式"><a href="#使用字典来存储表达式" class="headerlink" title="使用字典来存储表达式"></a>使用字典来存储表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stdcalc = &#123;</span><br><span class="line"> <span class="string">&#x27;sum&#x27;</span>: <span class="keyword">lambda</span> x, y: x + y,</span><br><span class="line"> <span class="string">&#x27;subtract&#x27;</span>: <span class="keyword">lambda</span> x, y: x - y</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(stdcalc[<span class="string">&#x27;sum&#x27;</span>](<span class="number">9</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(stdcalc[<span class="string">&#x27;subtract&#x27;</span>](<span class="number">9</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="一行代码计算任何数字的阶乘"><a href="#一行代码计算任何数字的阶乘" class="headerlink" title="一行代码计算任何数字的阶乘"></a>一行代码计算任何数字的阶乘</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">result = (<span class="keyword">lambda</span> k: functools.reduce(<span class="built_in">int</span>.__mul__, <span class="built_in">range</span>(<span class="number">1</span>,k+<span class="number">1</span>),<span class="number">1</span>))(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="找到一个列表中的出现最频繁的值"><a href="#找到一个列表中的出现最频繁的值" class="headerlink" title="找到一个列表中的出现最频繁的值"></a>找到一个列表中的出现最频繁的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="built_in">set</span>(test), key=test.count))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="重置递归限制"><a href="#重置递归限制" class="headerlink" title="重置递归限制"></a>重置递归限制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python3 将递归限制到 1000，我们可以重置这个值</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">x=<span class="number">1001</span></span><br><span class="line"><span class="built_in">print</span>(sys.getrecursionlimit())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1000</span></span><br><span class="line">sys.setrecursionlimit(x)</span><br><span class="line"><span class="built_in">print</span>(sys.getrecursionlimit())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1001</span></span><br></pre></td></tr></table></figure><h2 id="检查一个对象的内存使用"><a href="#检查一个对象的内存使用" class="headerlink" title="检查一个对象的内存使用"></a>检查一个对象的内存使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(x))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">14</span></span><br></pre></td></tr></table></figure><h2 id="使用-lt-slots-gt-减少内存消耗"><a href="#使用-lt-slots-gt-减少内存消耗" class="headerlink" title="使用 &lt;__slots__&gt; 减少内存消耗"></a>使用 &lt;__slots__&gt; 减少内存消耗</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystem1</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, files, folders, devices</span>):</span></span><br><span class="line">        self.files = files</span><br><span class="line">        self.folders = folders</span><br><span class="line">        self.devices = devices</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(FileSystem1))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">536</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystem2</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = [<span class="string">&#x27;files&#x27;</span>, <span class="string">&#x27;folders&#x27;</span>, <span class="string">&#x27;devices&#x27;</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, files, folders, devices</span>):</span></span><br><span class="line">        self.files = files</span><br><span class="line">        self.folders = folders</span><br><span class="line">        self.devices = devices</span><br><span class="line"><span class="built_in">print</span>(sys.getsizeof(FileSystem2))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">448</span></span><br></pre></td></tr></table></figure><h2 id="使用lambda来模仿输出方法"><a href="#使用lambda来模仿输出方法" class="headerlink" title="使用lambda来模仿输出方法"></a>使用lambda来模仿输出方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">lprint=<span class="keyword">lambda</span> *args:sys.stdout.write(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,args)))</span><br><span class="line">lprint(<span class="string">&quot;python&quot;</span>, <span class="string">&quot;tips&quot;</span>,<span class="number">1000</span>,<span class="number">1001</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>python tips <span class="number">1000</span> <span class="number">1001</span></span><br></pre></td></tr></table></figure><h2 id="从两个相关序列中创建一个字典"><a href="#从两个相关序列中创建一个字典" class="headerlink" title="从两个相关序列中创建一个字典"></a>从两个相关序列中创建一个字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">t2 = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span> (<span class="built_in">zip</span>(t1,t2)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">1</span>: <span class="number">10</span>, <span class="number">2</span>: <span class="number">20</span>, <span class="number">3</span>: <span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="用一行代码搜索字符串的前后缀"><a href="#用一行代码搜索字符串的前后缀" class="headerlink" title="用一行代码搜索字符串的前后缀"></a>用一行代码搜索字符串的前后缀</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;http://www.google.com&quot;</span>.startswith((<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;http://www.google.co.uk&quot;</span>.endswith((<span class="string">&quot;.com&quot;</span>, <span class="string">&quot;.co.uk&quot;</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="不使用任何循环，构造一个列表"><a href="#不使用任何循环，构造一个列表" class="headerlink" title="不使用任何循环，构造一个列表"></a>不使用任何循环，构造一个列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">test = [[-<span class="number">1</span>, -<span class="number">2</span>], [<span class="number">30</span>, <span class="number">40</span>], [<span class="number">25</span>, <span class="number">35</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(itertools.chain.from_iterable(test)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[-<span class="number">1</span>, -<span class="number">2</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">25</span>, <span class="number">35</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果输入列表中有嵌入的列表或元组作为元素，那么就使用下面这种方法，不过也有个局限，它使用了 for 循环</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unifylist</span>(<span class="params">l_input, l_target</span>):</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> l_input:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(it, <span class="built_in">list</span>):</span><br><span class="line">            unifylist(it, l_target)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(it, <span class="built_in">tuple</span>):</span><br><span class="line">            unifylist(<span class="built_in">list</span>(it), l_target)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l_target.append(it)</span><br><span class="line">    <span class="keyword">return</span> l_target</span><br><span class="line">test =  [[-<span class="number">1</span>, -<span class="number">2</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, [<span class="number">4</span>,(<span class="number">5</span>,[<span class="number">6</span>,<span class="number">7</span>])]], (<span class="number">30</span>, <span class="number">40</span>), [<span class="number">25</span>, <span class="number">35</span>]]</span><br><span class="line"><span class="built_in">print</span>(unifylist(test,[]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[-<span class="number">1</span>, -<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">25</span>, <span class="number">35</span>]</span><br></pre></td></tr></table></figure><h2 id="使用字典实现switch-case"><a href="#使用字典实现switch-case" class="headerlink" title="使用字典实现switch_case"></a>使用字典实现switch_case</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">python_switch</span>(<span class="params">x=<span class="literal">None</span></span>):</span></span><br><span class="line">    case_dict = &#123;<span class="string">&#x27;files&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;folders&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;devices&#x27;</span>: <span class="number">2</span>, <span class="literal">None</span> : <span class="literal">None</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> case_dict[x]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(python_switch(<span class="string">&#x27;files&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(python_switch())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">None</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;地道的循环&quot;&gt;&lt;a href=&quot;#地道的循环&quot; class=&quot;headerlink&quot; title=&quot;地道的循环&quot;&gt;&lt;/a&gt;地道的循环&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, name &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;enumerate&lt;/span&gt;(names):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(i, name)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;直接交换2个数字的位置&quot;&gt;&lt;a href=&quot;#直接交换2个数字的位置&quot; class=&quot;headerlink&quot; title=&quot;直接交换2个数字的位置&quot;&gt;&lt;/a&gt;直接交换2个数字的位置&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x, y = y, x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(x, y)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Python" scheme="https://laplacence.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python3中的默认函数可变问题</title>
    <link href="https://laplacence.github.io/2020/03/26/default_function_variable_problem/"/>
    <id>https://laplacence.github.io/2020/03/26/default_function_variable_problem/</id>
    <published>2020-03-25T16:00:00.000Z</published>
    <updated>2020-09-30T12:59:42.516Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">l=[]</span>):</span></span><br><span class="line">    l.append(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(datetime.now())</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(), sleep(<span class="number">2</span>), f())</span><br></pre></td></tr></table></figure><p>光看代码的话大家会觉得是什么输出呢？</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-03-<span class="number">26</span> <span class="number">21</span>:<span class="number">19</span>:<span class="number">36.722671</span></span><br><span class="line"><span class="number">2020</span>-03-<span class="number">26</span> <span class="number">21</span>:<span class="number">19</span>:<span class="number">38.722719</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>] <span class="literal">None</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><p>是不是和预期的不太一样？<strong>这是因为Python在处理默认参数时，仅在该函数定义的时候，被赋值一次。</strong><br>这也就导致了后续的默认参数操作会对最开始的默认参数可变对象进行操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">l=[], time=datetime.now(<span class="params"></span>)</span>):</span></span><br><span class="line">    l.append(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(time)</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(), sleep(<span class="number">2</span>), f())</span><br></pre></td></tr></table></figure><p>这里的输出就会导致于预期的不一致，原本打算让函数调用时对其生成时间，然而输出却是。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2020</span>-03-<span class="number">26</span> <span class="number">21</span>:<span class="number">25</span>:<span class="number">55.973219</span></span><br><span class="line"><span class="number">2020</span>-03-<span class="number">26</span> <span class="number">21</span>:<span class="number">25</span>:<span class="number">55.973219</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>] <span class="literal">None</span> [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><p>也恰恰证明了<strong>Python在处理默认参数时，仅在该函数定义的时候，被赋值一次。</strong><br>顺带print函数会对内含的函数全部处理完后输出，也就是上面的输出，即使有sleep，输出的结果仍然是最终处理的。<br>要避免上面的错误发生，Pycharm会做出提醒使用不可变对象的Warning，实际操作只需要对其做一个判断即可，例如。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">l=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> l <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        l = []</span><br><span class="line">    l.append(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(), f())</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&#x27;a&#x27;] [&#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sleep&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;l=[]&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l.append(&lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(datetime.now())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(f(), sleep(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;), f())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;光看代码的话大家会觉得是什么输出呢？&lt;/p&gt;</summary>
    
    
    
    <category term="experience" scheme="https://laplacence.github.io/categories/experience/"/>
    
    <category term="Python" scheme="https://laplacence.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>DDA画线法（考虑所有情况）</title>
    <link href="https://laplacence.github.io/2020/03/18/DDA_Line/"/>
    <id>https://laplacence.github.io/2020/03/18/DDA_Line/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2020-04-11T07:07:18.870Z</updated>
    
    <content type="html"><![CDATA[<p>使用了第三方图形库EGEv19.01，C++编写。</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DDA_Line</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> dx, dy, k, x, y;</span><br><span class="line">    dx = x1 - x0;</span><br><span class="line">    dy = y1 - y0;</span><br><span class="line">    k = dy / dx;</span><br><span class="line">    <span class="keyword">if</span> (dx == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//因为C++除法操作除数为零时候可能会出现undefined的结果</span></span><br><span class="line">        <span class="comment">//简化后续if判断</span></span><br><span class="line">        k = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x = x0;</span><br><span class="line">    y = y0;</span><br><span class="line">    <span class="keyword">if</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dx &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//k&gt;0且dx&gt;0</span></span><br><span class="line">            <span class="keyword">if</span> (dy &lt; dx) &#123;</span><br><span class="line">                <span class="comment">//0&lt;k&lt;1，步进方向为x，y增量为k</span></span><br><span class="line">                <span class="keyword">for</span> (; x &lt;= x1; ++x) &#123;</span><br><span class="line">                    <span class="built_in">putpixel</span>(x, <span class="built_in"><span class="keyword">int</span></span>(y + <span class="number">0.5</span>), BLACK);</span><br><span class="line">                    y += k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//k&gt;=1，步进方向为y，x增量为1/k</span></span><br><span class="line">                <span class="keyword">for</span> (; y &lt;= y1; ++y) &#123;</span><br><span class="line">                    <span class="built_in">putpixel</span>(<span class="built_in"><span class="keyword">int</span></span>(x + <span class="number">0.5</span>), y, BLACK);</span><br><span class="line">                    x += <span class="number">1</span> / k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//k&gt;0且dx&lt;0，dy&lt;0，此处判断反向画线</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(dy) &lt; <span class="built_in">abs</span>(dx)) &#123;</span><br><span class="line">                <span class="comment">//0&lt;k&lt;1，步进方向为x，y增量为-k</span></span><br><span class="line">                <span class="keyword">for</span> (; x &gt;= x1; --x) &#123;</span><br><span class="line">                    <span class="built_in">putpixel</span>(x, <span class="built_in"><span class="keyword">int</span></span>(y + <span class="number">0.5</span>), BLACK);</span><br><span class="line">                    y -= k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//k&gt;=1，步进方向为y，x增量为-1/k</span></span><br><span class="line">                <span class="keyword">for</span> (; y &gt;= y1; --y) &#123;</span><br><span class="line">                    <span class="built_in">putpixel</span>(<span class="built_in"><span class="keyword">int</span></span>(x + <span class="number">0.5</span>), y, BLACK);</span><br><span class="line">                    x -= <span class="number">1</span> / k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dx &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//k&lt;0且dx&gt;0，dy&lt;0</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(dy) &lt; <span class="built_in">abs</span>(dx)) &#123;</span><br><span class="line">                <span class="comment">//-1&lt;k&lt;0，步进方向为x，y增量为k</span></span><br><span class="line">                <span class="keyword">for</span> (; x &lt;= x1; ++x) &#123;</span><br><span class="line">                    <span class="built_in">putpixel</span>(x, <span class="built_in"><span class="keyword">int</span></span>(y + <span class="number">0.5</span>), BLACK);</span><br><span class="line">                    y += k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//k&lt;=-1，步进方向为y，x增量为1/k</span></span><br><span class="line">                <span class="keyword">for</span> (; y &gt;= y1; --y) &#123;</span><br><span class="line">                    <span class="built_in">putpixel</span>(<span class="built_in"><span class="keyword">int</span></span>(x + <span class="number">0.5</span>), y, BLACK);</span><br><span class="line">                    x -= <span class="number">1</span> / k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//k&lt;0且dx&lt;0，dy&gt;0，此处判断反向画线</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(dy) &lt; <span class="built_in">abs</span>(dx)) &#123;</span><br><span class="line">                <span class="comment">//-1&lt;k&lt;0，步进方向为x，y增量为-k</span></span><br><span class="line">                <span class="keyword">for</span> (; x &gt;= x1; --x) &#123;</span><br><span class="line">                    <span class="built_in">putpixel</span>(x, <span class="built_in"><span class="keyword">int</span></span>(y + <span class="number">0.5</span>), BLACK);</span><br><span class="line">                    y -= k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//k&gt;=-1，步进方向为y，x增量为-1/k</span></span><br><span class="line">                <span class="keyword">for</span> (; y &lt;= y1; ++y) &#123;</span><br><span class="line">                    <span class="built_in">putpixel</span>(<span class="built_in"><span class="keyword">int</span></span>(x + <span class="number">0.5</span>), y, BLACK);</span><br><span class="line">                    x += <span class="number">1</span> / k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">initgraph</span>(<span class="number">640</span>, <span class="number">480</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setbkcolor</span>(WHITE);</span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">30</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">60</span>); <span class="comment">//-1&lt;k&lt;0</span></span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">10</span>, <span class="number">60</span>, <span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">30</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">90</span>); <span class="comment">//k&lt;-1</span></span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">10</span>, <span class="number">90</span>, <span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">30</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">40</span>); <span class="comment">//0&lt;k&lt;1</span></span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">10</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">30</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">10</span>); <span class="comment">//k&gt;1</span></span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">10</span>, <span class="number">90</span>, <span class="number">10</span>, <span class="number">10</span>); <span class="comment">//k==0,x==10</span></span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">30</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">50</span>); <span class="comment">//k==0,y==50</span></span><br><span class="line">    <span class="built_in">DDA_Line</span>(<span class="number">10</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getch</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">closegraph</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用了第三方图形库EGEv19.01，C++编写。&lt;/p&gt;</summary>
    
    
    
    <category term="CPP" scheme="https://laplacence.github.io/categories/CPP/"/>
    
    <category term="algorithm" scheme="https://laplacence.github.io/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>中点画线法（考虑所有情况）</title>
    <link href="https://laplacence.github.io/2020/03/18/Midpoint/"/>
    <id>https://laplacence.github.io/2020/03/18/Midpoint/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2020-04-11T07:08:37.261Z</updated>
    
    <content type="html"><![CDATA[<p>使用了第三方图形库EGEv19.01，C++编写。</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入直线的两端点P0(x0,y0) 和 P1(x1,y1)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Midpoint_Line</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, d1, d2, d, x, y;</span><br><span class="line">    <span class="keyword">float</span> k;</span><br><span class="line">    <span class="keyword">if</span> (x1 &lt; x0) &#123;</span><br><span class="line">        <span class="comment">//置反操作,使得输出结果平面左右水平翻转,防止画反线段</span></span><br><span class="line">        d = x0, x0 = x1, x1 = d;</span><br><span class="line">        d = y0, y0 = y1, y1 = d;</span><br><span class="line">    &#125;</span><br><span class="line">    a = y0 - y1, b = x1 - x0;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//b==0,a&lt;0(k-&gt;inf)则放入k&gt;1,a&gt;0(k-&gt;-inf)则放入k&lt;-1</span></span><br><span class="line">        <span class="comment">//因为C++除法操作除数为零时候可能会出现undefined的结果</span></span><br><span class="line">        k = <span class="number">-1</span> * a * <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        k = (<span class="keyword">float</span>)a / (x0 - x1);</span><br><span class="line">    x = x0, y = y0;</span><br><span class="line">    <span class="built_in">putpixel</span>(x, y, GREEN);</span><br><span class="line">    <span class="comment">// 0&lt;=k&lt;=1</span></span><br><span class="line">    <span class="comment">// 1.计算初始值，a=y0−y1， b=x1−x0， D=2a+b</span></span><br><span class="line">    <span class="comment">// 2.x=x0，y=y0</span></span><br><span class="line">    <span class="comment">// 3.绘制点(x，y)，判断D的符号</span></span><br><span class="line">    <span class="comment">// 若D&lt;=0，则(x，y)更新为(x+1，y+1)，D更新为D=D+2a+2b</span></span><br><span class="line">    <span class="comment">// 否则(x，y)更新为(x+1，y)， D更新为D=D+2a</span></span><br><span class="line">    <span class="comment">// 4.当直线没有画完时，重复步骤3，否则结束</span></span><br><span class="line">    <span class="keyword">if</span> (k &gt;= <span class="number">0</span> &amp;&amp; k &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        d = <span class="number">2</span> * a + b;</span><br><span class="line">        d1 = <span class="number">2</span> * a, d2 = <span class="number">2</span> * (a + b);</span><br><span class="line">        <span class="keyword">while</span> (x &lt; x1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                ++x, ++y, d += d2;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++x, d += d1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putpixel</span>(x, y, RED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -1&lt;=k&lt;=0</span></span><br><span class="line">    <span class="comment">// 1.计算初始值，a=y0−y1， b=x1−x0， D=2a-b</span></span><br><span class="line">    <span class="comment">// 因为当-1&lt;=k&lt;=0时，b为负数，所以要2a-b</span></span><br><span class="line">    <span class="comment">// 2.x=x0，y=y0</span></span><br><span class="line">    <span class="comment">// 3.绘制点(x，y)，判断D的符号</span></span><br><span class="line">    <span class="comment">// 若D&gt;0，则(x，y)更新为(x+1，y-1)，D更新为D=D+2a-2b</span></span><br><span class="line">    <span class="comment">// 因为当-1&lt;=k&lt;=0时，x越大，y越小</span></span><br><span class="line">    <span class="comment">// 否则(x，y)更新为(x+1，y)， D更新为D=D+2a</span></span><br><span class="line">    <span class="comment">// 4.当直线没有画完时，重复步骤3，否则结束</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt;= <span class="number">0</span> &amp;&amp; k &gt;= <span class="number">-1</span>) &#123;</span><br><span class="line">        d = <span class="number">2</span> * a - b;</span><br><span class="line">        d1 = <span class="number">2</span> * a - <span class="number">2</span> * b, d2 = <span class="number">2</span> * a;</span><br><span class="line">        <span class="keyword">while</span> (x &lt; x1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ++x, --y, d += d1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++x, d += d2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putpixel</span>(x, y, BLUE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// k&gt;1</span></span><br><span class="line">    <span class="comment">// 1.计算初始值  a=y0−y1， b=x1−x0， D=2a+b</span></span><br><span class="line">    <span class="comment">// 2.x=x0，y=y0</span></span><br><span class="line">    <span class="comment">// 3.绘制点(x，y)，判断D的符号</span></span><br><span class="line">    <span class="comment">// 若D&gt;0，则(x，y)更新为(x+1，y+1)，D更新为D=D+2a+2b</span></span><br><span class="line">    <span class="comment">// 否则(x，y)更新为(y+1，y)， D更新为D=D+2b</span></span><br><span class="line">    <span class="comment">// 因为当k&gt;1时，y为步进方向。</span></span><br><span class="line">    <span class="comment">// 4.当直线没有画完时，重复步骤3，否则结束</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        d = a + <span class="number">2</span> * b;</span><br><span class="line">        d1 = <span class="number">2</span> * (a + b), d2 = <span class="number">2</span> * b;</span><br><span class="line">        <span class="keyword">while</span> (y &lt; y1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ++x, ++y, d += d1;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++y, d += d2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putpixel</span>(x, y, RED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// k&lt;-1</span></span><br><span class="line">    <span class="comment">// 1.计算初始值  a=y0−y1， b=x1−x0， D=2a-b</span></span><br><span class="line">    <span class="comment">// 2.x=x0，y=y0</span></span><br><span class="line">    <span class="comment">// 3.绘制点(x，y)，判断D的符号</span></span><br><span class="line">    <span class="comment">// 若D&lt;=0，则(x，y)更新为(x+1，y-1)，D更新为D=D-2a-2b</span></span><br><span class="line">    <span class="comment">// 因为当k&lt;-1时，a，b均为负数，所以要D=D-2a-2b</span></span><br><span class="line">    <span class="comment">// 因为当k&lt;-1时，x越大，y越小</span></span><br><span class="line">    <span class="comment">// 否则(x，y)更新为(y-1，y)， D更新为D=D-2b</span></span><br><span class="line">    <span class="comment">// 因为当k&lt;-1时，y为步进方向，且x越大y越小，即y-1</span></span><br><span class="line">    <span class="comment">// 4.当直线没有画完时，重复步骤3，否则结束</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        d = a - <span class="number">2</span> * b;</span><br><span class="line">        d1 = <span class="number">-2</span> * b, d2 = <span class="number">2</span> * a - <span class="number">2</span> * b;</span><br><span class="line">        <span class="keyword">while</span> (y &gt; y1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                ++x, --y, d += d2;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --y, d += d1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putpixel</span>(x, y, BLUE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">initgraph</span>(<span class="number">640</span>, <span class="number">480</span>);</span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">30</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">60</span>); <span class="comment">//-1&lt;k&lt;0</span></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">10</span>, <span class="number">60</span>, <span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">30</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">90</span>); <span class="comment">//k&lt;-1</span></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">10</span>, <span class="number">90</span>, <span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">30</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">40</span>); <span class="comment">//0&lt;k&lt;1</span></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">10</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">30</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">10</span>); <span class="comment">//k&gt;1</span></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">90</span>); <span class="comment">//k==0,x==10</span></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">10</span>, <span class="number">90</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">10</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">50</span>); <span class="comment">//k==0,y==50</span></span><br><span class="line">    <span class="built_in">Midpoint_Line</span>(<span class="number">30</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getch</span>();</span><br><span class="line">    <span class="built_in">closegraph</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用了第三方图形库EGEv19.01，C++编写。&lt;/p&gt;</summary>
    
    
    
    <category term="CPP" scheme="https://laplacence.github.io/categories/CPP/"/>
    
    <category term="algorithm" scheme="https://laplacence.github.io/categories/algorithm/"/>
    
    
  </entry>
  
</feed>
